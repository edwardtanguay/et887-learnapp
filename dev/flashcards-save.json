[
	{
		"back": "git checkout -- [file]",
		"category": "git",
		"extras": "",
		"front": "discard changes in working directory (before add)",
		"id": 1660,
		"importId": "discardChangesInWorkingDirectoryBeforeAdd_gitCheckoutFile",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-29 07:14:06",
		"lastTested": "2019-10-29 07:14:06",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.64",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 05:48:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git rm [file]",
		"category": "git",
		"extras": "",
		"front": "remove file from working directory and add deletion to staging area",
		"id": 1661,
		"importId": "removeFileFromWorkingDirectoryAndAddDeletionToStagingArea_gitRmFile",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-29 07:43:38",
		"lastTested": "2019-10-29 07:43:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.74",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 06:33:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git remote show origin` (you have to login)",
		"category": "git",
		"extras": "",
		"front": "how to find out what the master is",
		"id": 1662,
		"importId": "howToFindOutWhatTheMasterIs_gitRemoteShowOriginYouHaveToLogin",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 06:03:08",
		"lastTested": "2020-06-08 06:03:08",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "3.79",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 06:33:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reflog",
		"category": "git",
		"extras": "",
		"front": "list operations made on local repository",
		"id": 1663,
		"importId": "listOperationsMadeOnLocalRepository_gitReflog",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2019-11-29 02:16:14",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "2.76",
		"status": "testing",
		"systemWhenCreated": "2019-10-29 06:33:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git stash save pdf-junk`, `git stash list`, `git stash pop`, `git stash pop stash@{0}`, `get stash drop`",
		"category": "git",
		"extras": "",
		"front": "save local copy temporarily",
		"id": 1664,
		"importId": "saveLocalCopyTemporarily_gitStashGitStashPopGetStashDrop",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-13 09:44:55",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 9,
		"pronunciation": "",
		"rank": "4.36",
		"status": "removed",
		"systemWhenCreated": "2019-10-29 06:33:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clone https://github.com/edwardtanguay/testinfo.git test001",
		"category": "git",
		"extras": "",
		"front": "how to get Github project locally",
		"id": 1665,
		"importId": "howToGetGithubProjectLocally_gitCloneHttpsgithubcomedwardtanguaytestinfogitTest1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 08:42:24",
		"lastTested": "2020-05-13 08:42:24",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.25",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 07:03:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git pull, git push",
		"category": "git",
		"extras": "",
		"front": "how to get updates from Github code locally and copy back up",
		"id": 1666,
		"importId": "howToGetUpdatesFromGithubCodeLocallyAndCopyBackUp_gitPullGitPush",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-29 07:43:11",
		"lastTested": "2019-10-29 07:43:11",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.77",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 07:03:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git config --global user.name \"Hans Schmidt\"",
		"category": "git",
		"extras": "",
		"front": "change user name",
		"id": 1667,
		"importId": "changeUserName_gitConfigGlobalUsernameHansSchmidt",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-11-27 11:11:35",
		"lastTested": "2019-11-27 11:11:35",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 10,
		"pronunciation": "",
		"rank": "4.5",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 08:20:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git push origin :issue001",
		"category": "git",
		"extras": "",
		"front": "delete branch on Github",
		"id": 1668,
		"importId": "deleteBranchOnGithub_gitPushOriginIssue1",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2019-10-29 20:24:15",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2019-10-29 08:20:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git config --global user.email \"hans@nnn.com\"",
		"category": "git",
		"extras": "",
		"front": "change email ",
		"id": 1669,
		"importId": "changeEmail_gitConfigGlobalUseremailHansnnncom",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-10-30 12:08:10",
		"lastTested": "2019-10-30 12:08:10",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.84",
		"status": "learned",
		"systemWhenCreated": "2019-10-29 08:20:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git config --global credential.helper store",
		"category": "git",
		"extras": "",
		"front": "how to get git to remember your github credentials",
		"id": 1803,
		"importId": "howToGetGitToRememberYourGithubCredentials_gitConfigGlobalCredentialhelperStore",
		"kind": "command",
		"labels": "",
		"lastLearned": "2019-11-29 04:44:20",
		"lastTested": "2019-11-29 04:44:20",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.68",
		"status": "learned",
		"systemWhenCreated": "2019-11-27 10:42:30",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const numberSelected = this.categories.filter(x => x.included).length;",
		"category": "javascript",
		"extras": "",
		"front": "count how many items in array have property of certain value",
		"id": 1817,
		"importId": "countHowManyItemsInArrayHavePropertyOfCertainValue_constNumberSelectedThiscategoriesfilterxXincludedlength",
		"kind": "code",
		"labels": "",
		"lastLearned": "2019-11-29 07:18:48",
		"lastTested": "2019-11-29 07:18:48",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.42",
		"status": "learned",
		"systemWhenCreated": "2019-11-28 21:12:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `this.categories.forEach((x) => { x.included = false; })`, but notice this only works for properties of objects, i.e. you can't change the objects themselves",
		"category": "javascript",
		"extras": "",
		"front": "change values of a property on each item in an array",
		"id": 1818,
		"importId": "changeValuesOfAPropertyOnEachItemInAnArray_thiscategoriesforEachxXincludedFalse",
		"kind": "code",
		"labels": "",
		"lastLearned": "2020-06-08 06:06:12",
		"lastTested": "2020-06-08 06:06:12",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.43",
		"status": "learned",
		"systemWhenCreated": "2019-11-28 21:21:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git commit -am \"changed header\"",
		"category": "git",
		"extras": "",
		"front": "how to add and commit",
		"id": 1822,
		"importId": "howToAddAndCommit_gitCommitAmChangedHeader",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2019-11-29 04:19:54",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2019-11-28 17:28:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git push --dry-run",
		"category": "git",
		"extras": "",
		"front": "how to see if there is anything to push *(if nothing, then \"Everything up-to-date\")*",
		"id": 1826,
		"importId": "howToSeeIfThereIsAnythingToPush_gitPushDryRun",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 07:42:15",
		"lastTested": "2020-05-06 07:42:15",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.41",
		"status": "learned",
		"systemWhenCreated": "2019-11-29 04:19:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `cw` (change word) or `ciw` (change inner word)",
		"category": "vim",
		"extras": "",
		"front": "how to change the word your cursor is on",
		"id": 1835,
		"importId": "howToChangeTheWordYourCursorIsOn_cwChangeWordOrCiwChangeInnerWord",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-04 10:32:05",
		"lastTested": "2020-05-04 10:32:05",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.82",
		"status": "learned",
		"systemWhenCreated": "2019-11-29 07:46:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "yy p",
		"category": "vim",
		"extras": "",
		"front": "duplicate line",
		"id": 1899,
		"importId": "howToDuplicateLine_yyP",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 05:55:38",
		"lastTested": "2020-05-06 05:55:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.9234",
		"status": "learned",
		"systemWhenCreated": "2019-11-29 10:57:01",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --pretty=format:\"%h - %ci - %s - %an\"",
		"category": "git",
		"extras": "",
		"front": "how to list all commits as \"hash - date - title - author\"",
		"id": 1928,
		"importId": "howToListAllCommitsWithDateAndAuthor_gitLogPrettyformathCiSAn",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-07 20:50:49",
		"lastTested": "2020-05-07 20:50:49",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 7,
		"pronunciation": "",
		"rank": "4.5",
		"status": "learned",
		"systemWhenCreated": "2019-12-05 04:10:53",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` only categories: `select DISTINCT trim(category) from flashcards order by category`, with totals: `select category, count(*) as total from flashcards group by category order by total desc`",
		"category": "sqlite",
		"extras": "",
		"front": "show list of all used categories in order, then with totals",
		"id": 2649,
		"importId": "showListOfAllUsedCategoriesInOrder_selectDISTINCTTrimcategoryFromFlashcardsOrderByCategory",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 05:59:18",
		"lastTested": "2020-06-08 05:59:18",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 9,
		"pronunciation": "",
		"rank": "4.27",
		"status": "learned",
		"systemWhenCreated": "2020-04-27 14:17:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select * from flashcards where category in ('linux', 'git', 'javascript')",
		"category": "sqlite",
		"extras": "",
		"front": "show all where category is one of three values",
		"id": 2650,
		"importId": "showAllWhereCategoryIsOneOfThreeValues_selectFromFlashcardsWhereCategoryInLinuxGitJavascript",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-04 09:00:21",
		"lastTested": "2020-05-04 09:00:21",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.95",
		"status": "learned",
		"systemWhenCreated": "2020-04-27 14:17:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git add -A",
		"category": "git",
		"extras": "",
		"front": "how to add all changes from working directory to index",
		"id": 2651,
		"importId": "howToAddAllChangesFromWorkingDirectoryToIndex_gitAddA",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 07:53:26",
		"lastTested": "2020-05-13 07:53:26",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.29",
		"status": "learned",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --oneline",
		"category": "git",
		"extras": "",
		"front": "list abbreviated log",
		"id": 2652,
		"importId": "listAbbreviatedLog_gitLogOnline",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 05:34:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.36",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --oneline **then** git revert 068b100",
		"category": "git",
		"extras": "",
		"front": "how to undo a commit",
		"id": 2653,
		"importId": "howToUndoACommit_gitLogOnlineThenGitRevert68b1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-04 09:09:19",
		"lastTested": "2020-05-04 09:09:19",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.64",
		"status": "learned",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm outdated",
		"category": "npm",
		"extras": "",
		"front": "how to find which packages need to be updated",
		"id": 2654,
		"importId": "howToFindWhichPackagesNeedToBeUpdated_npmOutdated",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:44:59",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.93",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git push -u origin et/bugfix/clean-up-code-copy-box",
		"category": "git",
		"extras": "",
		"front": "how to push local branch to remote",
		"id": 2655,
		"importId": "howToPushLocalBranchToRemote_gitPushUOriginEtbugfixcleanUpCodeCopyBox",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:46:16",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.24",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git config --global core.editor \"nano\" **(or \"vim\")**",
		"category": "git",
		"extras": "",
		"front": "how to change git editor for commits",
		"id": 2656,
		"importId": "howToChangeGitEditorForCommits_gitConfigGlobalCoreeditorNanoOrVim",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:46:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.19",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log -1",
		"category": "git",
		"extras": "",
		"front": "only show the last commit",
		"id": 2657,
		"importId": "onlyShowTheLastCommit_gitLog1",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:47:01",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.43",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout -- index.html",
		"category": "git",
		"extras": "",
		"front": "how to discard changes to a file in working directory\t",
		"id": 2658,
		"importId": "howToDiscardChangesToAFileInWorkingDirectory_gitCheckoutIndexhtml",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:48:04",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2020-04-27 17:27:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git rm --cached index.html\t\t\t\t\t\t\t\t\t\t\t\t\t",
		"category": "git",
		"extras": "",
		"front": "how to mark a file as deleted in the index ",
		"id": 2659,
		"importId": "howToGetAFileBackFromIndexToWorkingDirectory_gitRmCachedIndexhtml",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 08:53:09",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.38",
		"status": "testing",
		"systemWhenCreated": "2020-04-28 16:25:12",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git ls-files --others --exclude-standard",
		"category": "git",
		"extras": "",
		"front": "how to see all files in working directory that are not being tracked yet",
		"id": 2660,
		"importId": "howToSeeAllFilesInWorkingDirectoryThatAreNotBeingTrackedYet_gitLsFilesOthersExcludeStandard",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-08 05:20:20",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "1.88",
		"status": "testing",
		"systemWhenCreated": "2020-04-28 16:25:12",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "back-tick key",
		"category": "gimp",
		"extras": "",
		"front": "toggle between two zooms",
		"id": 2661,
		"importId": "toggleBetweenTwoZooms_backTickKey",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 11:10:56",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-shift-j",
		"category": "gimp",
		"extras": "",
		"front": "fit image in window",
		"id": 2662,
		"importId": "fitImageInWindow_ctrlShiftJ",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 11:14:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-shift-a",
		"category": "gimp",
		"extras": "",
		"front": "deselect selection",
		"id": 2663,
		"importId": "deselectSelection_ctrlShiftA",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 11:14:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "double-click in main window area",
		"category": "gimp",
		"extras": "",
		"front": "open file",
		"id": 2664,
		"importId": "openFile_doubleClickInMainWindowArea",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git remote add origin https://github.com/edwardtanguay/nodeExpress4.git && git push -u origin master",
		"category": "git",
		"extras": "",
		"front": "how to set the GitHub repository for a new local directory",
		"id": 2665,
		"importId": "howToSetTheGitHubRepositoryForANewLocalDirectory_gitRemoteAddOriginHttpsgithubcomedwardtanguaynodeExpress4gitGitPushUOriginMaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 06:54:18",
		"lastTested": "2020-05-06 06:54:18",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout -- .",
		"category": "git",
		"extras": "",
		"front": "how to reset all tracked files in workspace back",
		"id": 2666,
		"importId": "howToResetAllTrackedFilesInWorkspaceBack_gitCheckout",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-07 20:49:29",
		"lastTested": "2020-05-07 20:49:29",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.999994",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clone -b 001-two-page-base-functionality https://github.com/edwardtanguay/eleventy4.git eleventy001",
		"category": "git",
		"extras": "",
		"front": "how to clone a branch of a GitHub repository",
		"id": 2667,
		"importId": "howToCloneABranchOfAGitHubRepository_gitCloneB1TwoPageBaseFunctionalityHttpsgithubcomedwardtanguayeleventy4gitEleventy1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 08:23:26",
		"lastTested": "2020-05-06 08:23:26",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.71",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git diff --stat --cached origin/master",
		"category": "git",
		"extras": "",
		"front": "how to see what files I am about to push",
		"id": 2668,
		"importId": "howToSeeWhatFilesIAmAboutToPush_gitDiffStatCachedOriginmaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 03:57:47",
		"lastTested": "2020-05-13 03:57:47",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 8,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git merge origin/master",
		"category": "git ",
		"extras": "",
		"front": "how to get the latest changes from master into your branch",
		"id": 2669,
		"importId": "howToGetTheLatestChangesFromMasterIntoYourBranch_gitMergeOriginmaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "type ll",
		"category": "linux",
		"extras": "",
		"front": "how to find out what an alias is mapped to",
		"id": 2670,
		"importId": "howToFindOutWhatAnAliasIsMappedTo_typeLl",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "removed",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clean -fd  >>> (f = force, d = directories)",
		"category": "git",
		"extras": "",
		"front": "how to remove untracked files and directories in working directory, e.g. a whole bunch of log files and test directories that you created but don't want to add to the repository",
		"id": 2671,
		"importId": "howToRemoveUntrackedFilesInWorkingDirectoryEgAWholeBunchOfLogFilesYouCreatedButDontWantToAddToTheRepository_gitCleanFd",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 10:59:39",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.04",
		"status": "testing",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "browser-sync start -s --directory --files=*/**",
		"category": "browsersync",
		"extras": "",
		"front": "how to browse through directory and start HTML websites on port",
		"id": 2672,
		"importId": "howToBrowseThroughDirectoryAndStartHTMLWebsitesOnPort_browserSyncStartSDirectoryFiles",
		"kind": "commands",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `npm i http-server -g` (global) then e.g. `http-server -p 3333` and `localhost:3333` will use `index.html`  as default",
		"category": "dev",
		"extras": "",
		"front": "how to install local http server",
		"id": 2673,
		"importId": "howToInstallLocalHttpServer_npmInstallHttpServerGThenEgHttpServerP3333",
		"kind": "tool",
		"labels": "",
		"lastLearned": "2020-06-03 05:33:06",
		"lastTested": "2020-06-03 05:33:06",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.92",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "chmod u+x doit (chmod u-x doit)",
		"category": "linux ",
		"extras": "",
		"front": "how to make command executable, and remove it",
		"id": 2674,
		"importId": "howToMakeCommandExecutableAndRemoveIt_chmodUxDoitChmodUXDoit",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git commit *todo.txt -m \"small changes to todo file\"",
		"category": "git",
		"extras": "",
		"front": "how to send just one changed file from working directory all the way to local repository",
		"id": 2676,
		"importId": "howToSendJustOneChangedFileFromWorkingDirectoryAllToLocalRepository_gitCommitTodotxtMSmallChangesToTodoFile",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-04 12:47:35",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.29",
		"status": "testing",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ODS Hot Keys",
		"category": "webdev",
		"extras": "",
		"front": "program that shows keys you are typing for tutorials and workshops",
		"id": 2677,
		"importId": "programThatShowsKeysYouAreTypingForTutorialsAndWorkshops_oDSHotKeys",
		"kind": "tool",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "p>lorem",
		"category": "emmet",
		"extras": "",
		"front": "how to produce filler text in a paragraph element",
		"id": 2678,
		"importId": "howToProduceFillerTextInAParagraphElement_plorem",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "injects css into head of the DOM",
		"category": "webpack",
		"extras": "",
		"front": "what does the style-loader do?",
		"id": 2679,
		"importId": "whatDoesTheStyleLoaderDo_injectsCssIntoHeadOfTheDOM",
		"kind": "info",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-04 16:11:00",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find systemItems -iname \"*ver*\"",
		"category": "linux",
		"extras": "",
		"front": "find all files in `systemItems` which have the text \"ver\" in them",
		"id": 2680,
		"importId": "findAllFilesInSystemItemsWhichHaveTheTextVerInThem_findSystemItemsInameVer",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 08:57:35",
		"lastTested": "2020-05-06 08:57:35",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.82",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:16:36",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `find . -empty` and for specific directory: `find ./dev -empty` (notice `./`)",
		"category": "linux",
		"extras": "",
		"front": "find all empty files in (1) *all recursive files* and (2) in *certain directory*",
		"id": 2681,
		"importId": "findAllEmptyFiles_findEmpty",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 05:47:33",
		"lastTested": "2020-06-08 05:47:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 9,
		"pronunciation": "",
		"rank": "4.3",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 16:27:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": " find . -iname \"*array*\"",
		"category": "linux",
		"extras": "",
		"front": "find all JavaScript files that have the word \"array\" in them",
		"id": 2682,
		"importId": "findAllJavaScriptFilesThatHaveTheWordArrayInThem_findGrepIArrayjs",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 05:56:51",
		"lastTested": "2020-05-13 05:56:51",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.69",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 19:19:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -name \"*\" -not -path \"./node_modules/*\" | grep -i \".*item.*\\.js$\" > text.txt\t",
		"category": "linux",
		"extras": "",
		"front": "create a file listing all JavaScript files that have the word \"item\" in the name EXCEPT in the `node_modules` directory",
		"id": 2683,
		"importId": "findAllJavaScriptFilesThatHaveTheWordItemInTheNameEXCEPTInTheNodemodulesDirectory_findNameNotPathNodemodulesGrepIItemjsTexttxt",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-07 20:48:54",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.91",
		"status": "removed",
		"systemWhenCreated": "2020-05-04 19:19:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -iname \"*parse*\" -not -path \"./node_modules/*\"",
		"category": "linux",
		"extras": "",
		"front": "find all files with \"parse\" in the name EXCEPT in the directory `node_modules`",
		"id": 2684,
		"importId": "findAllFilesWithParseInTheNameEXCEPTInTheDirectoryNodemodules_findInameParseNotPathNodemodules",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 07:17:37",
		"lastTested": "2020-05-06 07:17:37",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.85",
		"status": "learned",
		"systemWhenCreated": "2020-05-04 19:19:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git remote -v` (-v is for verbose)",
		"category": "git",
		"extras": "",
		"front": "how to get the remote GitHub fetch/pull URL of a local repository",
		"id": 2685,
		"importId": "howToGetTheRemoteGitHubFetchURLOfALocalRepository_gitRemoteV",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-05 08:42:22",
		"lastTested": "2020-06-05 08:42:22",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 7,
		"pronunciation": "",
		"rank": "4.7",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 07:46:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "r",
		"category": "gimp",
		"extras": "",
		"front": "rectangle tool",
		"id": 2686,
		"importId": "rectangleTool_r",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-05 07:46:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-shift-a",
		"category": "gimp",
		"extras": "",
		"front": "unselect everything",
		"id": 2687,
		"importId": "unselectEverything_ctrlShiftA",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-05 07:46:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm un babel-node",
		"category": "npm",
		"extras": "",
		"front": "how to uninstall an npm package, e.g. `babel-node`",
		"id": 2688,
		"importId": "howToUninstallAPackage_npmUnBabelNode",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 06:00:27",
		"lastTested": "2020-06-08 06:00:27",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.19",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 07:46:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout master && git merge et/feat/new-checkbox && git branch -d et/feat/new-checkbox",
		"category": "git",
		"extras": "",
		"front": "merge branch you are working on back into master",
		"id": 2689,
		"importId": "gitMergeEtfeatnewCheckbox_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 05:47:03",
		"lastTested": "2020-06-08 05:47:03",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.79",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 17:20:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git checkout -b et/feat/new-checkbox` (-b = new [b]ranch)",
		"category": "git",
		"extras": "",
		"front": "create new branch",
		"id": 2690,
		"importId": "gitCheckoutBEtfeatnewCheckbox_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-07 20:51:12",
		"lastTested": "2020-05-07 20:51:12",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.46",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 17:20:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git branch -d et/bugfix/clean-up-code-copy-box",
		"category": "git",
		"extras": "",
		"front": "how to delete a local branch",
		"id": 2691,
		"importId": "gitBranchDEtbugfixcleanUpCodeCopyBox_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 07:42:00",
		"lastTested": "2020-05-06 07:42:00",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.42",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 17:20:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git branch -a",
		"category": "git",
		"extras": "",
		"front": "show all branches, local and remote",
		"id": 2692,
		"importId": "gitBranchA_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-06 07:41:28",
		"lastTested": "2020-05-06 07:41:28",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.47",
		"status": "learned",
		"systemWhenCreated": "2020-05-05 17:20:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "browser-sync start -s -f \"**/*\"",
		"category": "browsersync",
		"extras": "",
		"front": "what is the basic command to start browser-sync",
		"id": 2693,
		"importId": "browserSyncStartServerFiles_",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 09:09:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "it means from the root of the project and avoids you having to write things like: import Component from '../../../../components/component'",
		"category": "node",
		"extras": "",
		"front": "what does the ampersand in `import Component from '@/components/component'` mean",
		"id": 2694,
		"importId": "whatDoesTheAmpersandInImportComponentFromComponentscomponentMean_itMeansFromTheRootOfTheProjectAndAvoidsYouHavingToWriteThingsLikeImportComponentFromComponentscomponent",
		"kind": "clarification",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 09:09:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "e",
		"category": "gimp",
		"extras": "",
		"front": "ellipse select tool",
		"id": 2695,
		"importId": "ellipseSelectTool_e",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 09:09:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "is used to import style rules from other style sheets",
		"category": "css",
		"extras": "",
		"front": "what does `@import 'custom.css';` mean",
		"id": 2696,
		"importId": "whatDoesImportCustomcssMean_isUsedToImportStyleRulesFromOtherStyleSheets",
		"kind": "explanation",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 09:09:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "any file with any extension in any subdirectory, including the current one",
		"category": "browsersync",
		"extras": "",
		"front": "what do the double asterisks in `--files \"/assets/**/*.*\"` mean",
		"id": 2697,
		"importId": "whatDoTheDoubleAsterisksInFilesAssetsMean_anyFileWithAnyExtensionInAnySubdirectoryIncludingTheCurrentOne",
		"kind": "syntax",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 11:49:29",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "browser-sync start --config bs-config.js",
		"category": "browsersync",
		"extras": "",
		"front": "how to start browser-sync with a config file after you run `browser-sync init`",
		"id": 2698,
		"importId": "howToStartBrowserSyncWithAConfigFileAfterYouRunBrowserSyncInit_browserSyncStartConfigBsConfigjs",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 11:49:29",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "browser-sync start --server --files \"**/*\" --index \"index.htm\"",
		"category": "browsersync",
		"extras": "",
		"front": "how to specific the main file as \"index.htm\"",
		"id": 2699,
		"importId": "howToSpecificTheMainFileAsIndexhtm_browserSyncStartServerFilesIndexIndexhtm",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-06 11:49:29",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git remote prune origin",
		"category": "git",
		"extras": "",
		"front": "delete a remote branch that still shows with `git branch -a` but doesn't actually exist",
		"id": 2700,
		"importId": "deleteARemoteBranchThatStillShowsWithGitBranchAButDoesntActuallyExist_gitRemotePruneOrigin",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-06 06:33:34",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.22",
		"status": "testing",
		"systemWhenCreated": "2020-05-06 11:49:29",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --oneline -1",
		"category": "git",
		"extras": "",
		"front": "get the name of the commit that is about to be pushed",
		"id": 2701,
		"importId": "getTheNameOfTheCommitThatIsAboutToBePushed_gitLogOneline1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 06:00:12",
		"lastTested": "2020-05-13 06:00:12",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.53",
		"status": "learned",
		"systemWhenCreated": "2020-05-06 16:45:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -iname \"*.js\" -not -path \"./node_modules/*\"",
		"category": "git",
		"extras": "",
		"front": "find all JavaScript files in any directory except for `node_modules`",
		"id": 2702,
		"importId": "smallerCommandToFindAllJavaScriptFilesInAnyDirectoryExceptForNodemodules_findInameItemjsNotPathNodemodules",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-12 07:09:55",
		"lastTested": "2020-05-12 07:09:55",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.97",
		"status": "learned",
		"systemWhenCreated": "2020-05-06 16:45:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clean -df && git checkout -- .",
		"category": "git",
		"extras": "",
		"front": "how to completely reset working directory, e.g. all new and tracked files",
		"id": 2703,
		"importId": "howToCompletelyResetWorkingDirectoryEgAllNewAndTrackedFiles_gitCleanDfGitCheckout",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 04:20:50",
		"lastTested": "2020-05-13 04:20:50",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.94",
		"status": "learned",
		"systemWhenCreated": "2020-05-06 16:45:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "dwwP",
		"category": "vim",
		"extras": "",
		"front": "swap words",
		"id": 2704,
		"importId": "swapWords_dwwP",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 07:47:35",
		"lastTested": "2020-05-13 07:47:35",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.36",
		"status": "learned",
		"systemWhenCreated": "2020-05-06 16:45:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "SHIFT-eye",
		"category": "gimp",
		"extras": "",
		"front": "how to hide all other layers but one",
		"id": 2705,
		"importId": "howToHideAllOtherLayersButOne_sHIFTEye",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-07 17:28:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "f",
		"category": "gimp",
		"extras": "",
		"front": "lasso tool",
		"id": 2706,
		"importId": "lassoTool_f",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-07 17:28:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm list -g --depth=0",
		"category": "npm",
		"extras": "",
		"front": "see which global packages are installed",
		"id": 2707,
		"importId": "seeWhichGlobalPackagesAreInstalled_npmListGDepth",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-12 05:59:57",
		"lastTested": "2020-05-12 05:59:57",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.99",
		"status": "learned",
		"systemWhenCreated": "2020-05-08 02:46:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ALT-42",
		"category": "windows",
		"extras": "",
		"front": "ALT-number for asterisk",
		"id": 2708,
		"importId": "alt 42_",
		"kind": "keyboard",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Layer > New From Visible",
		"category": "gimp",
		"extras": "",
		"front": "merge all layers into new layer",
		"id": 2709,
		"importId": "mergeAllLayersIntoNewLayer_layerNewFromVisible",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-shift-n",
		"category": "gimp",
		"extras": "",
		"front": "create new layer",
		"id": 2710,
		"importId": "createNewLayer_ctrlShiftN",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "SHIFT-CTRL-P code: show release notes",
		"category": "vscode",
		"extras": "",
		"front": "how to see release notes again",
		"id": 2711,
		"importId": "howToSeeReleaseNotesAgain_sHIFTCTRLPCodeShowReleaseNotes",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm uninstall -g create-react-app",
		"category": "npm",
		"extras": "",
		"front": "how to uninstall a global package",
		"id": 2712,
		"importId": "howToUninstallAGlobalPackage_npmUninstallGCreateReactApp",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-13 05:57:06",
		"lastTested": "2020-05-13 05:57:06",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.68",
		"status": "learned",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-, scrollToSwitchTabs",
		"category": "vscode",
		"extras": "",
		"front": "how to enable mouse wheel to switch tabs",
		"id": 2713,
		"importId": "howToEnableMouseWheelToSwitchTabs_ctrlScrollToSwitchTabs",
		"kind": "feature",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "create-react-app my-app --scripts-version react-scripts@^2",
		"category": "react",
		"extras": "",
		"front": "how to install create-react-app with classes instead of functions",
		"id": 2714,
		"importId": "howToInstallCreateReactAppWithClassesInsteadOfFunctions_createReactAppMyAppScriptsVersionReactScripts2",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "edit > preferences > windows management > reset",
		"category": "gimp",
		"extras": "",
		"front": "if your menus disappear",
		"id": 2715,
		"importId": "ifYourMenusDisappear_editPreferencesWindowsManagementReset",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` for directories: `find . -type d -iname \"q*\" -not -path \"./node_modules/*\"`, and for files: `find . -type f -iname \"q*\" -not -path \"./node_modules/*\"`",
		"category": "linux",
		"extras": "",
		"front": "list *only files* or *only directories* that begin with \"q\" EXCEPT FOR those in `node_modules`",
		"id": 2716,
		"importId": "listAllFilesAndDirectoriesThatBeginWithR_lsDR",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-15 04:21:59",
		"lastTested": "2020-05-15 04:21:59",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 8,
		"pronunciation": "",
		"rank": "4.61",
		"status": "learned",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select layer > layer > crop to content",
		"category": "gimp",
		"extras": "",
		"front": "reduce the layer size to the content of what you drew",
		"id": 2717,
		"importId": "reduceTheLayerSizeToTheContentOfWhatYouDrew_selectLayerLayerCropToContent",
		"kind": "howto",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "<ul class=\"nav nav-pills\">\n    <li class=\"nav-item\">\n      <a class=\"nav-link active\" href=\"#\">Active</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"#\">Link</a>\n    </li>\n</ul>",
		"category": "bootstrap",
		"extras": "",
		"front": "thick buttons as menu buttons",
		"id": 2718,
		"importId": "responsibleMenu_ulClassnavNavPillsFlexColumnFlexMdRow",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-10 04:33:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.77",
		"status": "testing",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select layer > layer > crop to content > ctrl-c > ctrl-shift-v > ctrl-e",
		"category": "gimp",
		"extras": "",
		"front": "save content of layer at image",
		"id": 2719,
		"importId": "saveContentOfLayerAtImage_selectLayerLayerCropToContentCtrlCCtrlShiftVCtrlE",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm cache clean --force",
		"category": "npm",
		"extras": "",
		"front": "what to do if you get the error \"Maximum call stack size exceeded on npm install\"",
		"id": 2720,
		"importId": "whatToDoIfYouGetTheErrorMaximumCallStackSizeExceededOnNpmInstall_npmCacheCleanForce",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:58:36",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "3.79",
		"status": "testing",
		"systemWhenCreated": "2020-05-10 16:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select category, count(*) as total from flashcards group by category order by total desc",
		"category": "sqlite",
		"extras": "",
		"front": "how to get how many records in each category",
		"id": 2721,
		"importId": "howToGetHowManyRecordsInEachCategory_selectCategoryCountAsTotalFromFlashcardsGroupByCategoryOrderByTotalDesc",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-12 06:08:34",
		"lastTested": "2020-05-12 06:08:34",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.99",
		"status": "learned",
		"systemWhenCreated": "2020-05-10 19:02:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm update",
		"category": "npm",
		"extras": "",
		"front": "how to fix problems when e.g. sqlite3 can't be found ",
		"id": 2722,
		"importId": "npmUpdate_",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-19 04:07:04",
		"lastTested": "2020-05-19 04:07:04",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.14",
		"status": "learned",
		"systemWhenCreated": "2020-05-11 05:17:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "user-select: none;",
		"category": "css",
		"extras": "",
		"front": "how to make it so that the user can't select text",
		"id": 2723,
		"importId": "howToMakeItSoThatTheUserCantSelectText_userSelectNone",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-12 11:59:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --oneline -1 && git diff --stat --cached origin/master",
		"category": "git",
		"extras": "",
		"front": "how to see the name of commit and its files that are about to be pushed",
		"id": 2724,
		"importId": "howToSeeTheNameOfCommitAndItsFilesThatAreAboutToBePushed_gitLogOneline1GitDiffStatCachedOriginmaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-12 07:09:17",
		"lastTested": "2020-05-12 07:09:17",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-12 11:59:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -iname \"*item*.js\" ! -path \"./node_modules/*\" > itemFiles.txt",
		"category": "linux",
		"extras": "",
		"front": "create file listing all files with \"item\" in the name, but not in node_modules",
		"id": 2725,
		"importId": "createFileListingAllFilesWithItemInTheNameButNotInNodemodules_findInameItemjsNotPathNodemodulesItemFilestxt",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-20 09:32:33",
		"lastTested": "2020-05-20 09:32:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.91",
		"status": "learned",
		"systemWhenCreated": "2020-05-13 11:02:17",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reset HEAD testItemFiles.txt",
		"category": "git",
		"extras": "",
		"front": "how to pull the file `testItemFiles.txt` back from staged to workspace",
		"id": 2726,
		"importId": "howToPullOneFileBackFromStagedToUnstaged_gitResetHEADTestItemFilestxt",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 10:21:19",
		"lastTested": "2020-05-18 10:21:19",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.43",
		"status": "learned",
		"systemWhenCreated": "2020-05-13 15:44:15",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git status",
		"category": "git",
		"extras": "",
		"front": "how to see what files are staged",
		"id": 2727,
		"importId": "howToSeeWhatFileAreStaged_gitStatus",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-15 04:22:25",
		"lastTested": "2020-05-15 04:22:25",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.47",
		"status": "learned",
		"systemWhenCreated": "2020-05-13 15:44:15",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `pkill -x node` (-x means to match name exactly)",
		"category": "linux",
		"extras": "",
		"front": "how to stop process",
		"id": 2728,
		"importId": "howToStopProcess_pkillXNodeXMeansToMatchNameExactly",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 04:36:40",
		"lastTested": "2020-05-18 04:36:40",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.53",
		"status": "learned",
		"systemWhenCreated": "2020-05-14 06:13:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git diff origin/master` (it will also show local changed, i.e. the difference between local workspace and github apparently)",
		"category": "git",
		"extras": "",
		"front": "see what changes will be coming on next pull",
		"id": 2729,
		"importId": "seeWhatChangesWillBeComingOnNextPull_gitDiffOriginmaster",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:06:04",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 8,
		"pronunciation": "",
		"rank": "4.3",
		"status": "testing",
		"systemWhenCreated": "2020-05-14 06:13:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . -type d ! -path \"./node_modules/*\" ! -path \"./.git/*\"",
		"category": "linux",
		"extras": "",
		"front": "find all directories except for those in `node_modules` and `.git`",
		"id": 2730,
		"importId": "findAllDirectoriesExceptForThoseInNodemodulesAndGit_findTypeDPathNodemodulesPathGit",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 04:13:30",
		"lastTested": "2020-05-18 04:13:30",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.71",
		"status": "learned",
		"systemWhenCreated": "2020-05-14 10:28:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "```\t`grid-template-columns: 100px 1fr 1fr;` AND `grid-template-rows: 200px;`",
		"category": "css",
		"extras": "",
		"front": "grid with three boxes, 100px then half/half of rest, and the row 200px high",
		"id": 2731,
		"importId": "gridWithThreeBoxes1pxThenHalfhalfOfRestAndTheRow2pxHigh_gridTemplateColumns1px1fr1frANDGridTemplateRows2px",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-14 23:17:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "grid-template-columns: 100px minmax(100px, 1fr) 3fr;",
		"category": "css",
		"extras": "",
		"front": "grid with three boxes, 100px then 1:3 but second column may not be smaller than 100px",
		"id": 2732,
		"importId": "gridWithThreeBoxes1pxThen13ButSecondColumnMayNotBeSmallerThan1px_gridTemplateColumns1pxMinmax1px1fr3fr",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-14 23:17:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git clone [URL] mytest`, go to directory, `git reset --hard [HASH]`",
		"category": "git",
		"extras": "",
		"front": "how to clone a respository at a certain commit",
		"id": 2733,
		"importId": "howToCloneARespositoryAtACertainCommit_gitCloneURLMytestTHENGitResetHardHASH",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 06:01:20",
		"lastTested": "2020-06-08 06:01:20",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.02",
		"status": "learned",
		"systemWhenCreated": "2020-05-15 00:20:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "shift-click a link checkbox",
		"category": "gimp",
		"extras": "",
		"front": "link all layers",
		"id": 2734,
		"importId": "linkAllLayers_shiftClickALinkCheckbox",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-15 00:38:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "shift-s",
		"category": "gimp",
		"extras": "",
		"front": "scale tool",
		"id": 2735,
		"importId": "scaleTool_shiftS",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-15 00:38:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npx create-react-app reactfull --use-npm",
		"category": "react",
		"extras": "",
		"front": "create react app with npm",
		"id": 2736,
		"importId": "createReactAppWithNpm_npxCreateReactAppReactfullUseNpm",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-15 08:00:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "display: grid; grid-gap: 10px; padding: 10px; grid-row-gap, grid-column-gap",
		"category": "css",
		"extras": "",
		"front": "base formating for a grid",
		"id": 2737,
		"importId": "baseFormatingForAGrid_displayGridGridGap1pxPadding1pxGridRowGapGridColumnGap",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-15 19:49:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "<ul class=\"navbar-nav ml-auto\">",
		"category": "bootstrap",
		"extras": "",
		"front": "move menu items in navbar to the right",
		"id": 2739,
		"importId": "moveMenuItemsInNavbarToTheRight_ulClassnavbarNavMlAuto",
		"kind": "class",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:40:56",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.18",
		"status": "testing",
		"systemWhenCreated": "2020-05-16 12:48:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": ":%s/n49/n29/g",
		"category": "vim",
		"extras": "",
		"front": "search and replace in whole file",
		"id": 2740,
		"importId": "searchAndReplaceInWholeFile_sn49n29g",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 04:36:26",
		"lastTested": "2020-05-18 04:36:26",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-16 14:44:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select-by-color tool (shift-o), click, colors, hue-saturation, lightness",
		"category": "gimp",
		"extras": "",
		"front": "make specific color darker",
		"id": 2741,
		"importId": "makeSpecificColorDarker_selectByColorToolShiftOClickColorsHueSaturationLightness",
		"kind": "task",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-16 16:36:58",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "i",
		"category": "gimp",
		"extras": "",
		"front": "scissor select",
		"id": 2742,
		"importId": "scissorSelect_i",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-16 16:36:59",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Bracket Pair Colorizer 2",
		"category": "vscode",
		"extras": "",
		"front": "how to more easily identify which brackets are matched in code",
		"id": 2743,
		"importId": "howToMoreEasilyIdentifyWhichBracketsAreMatchedInCode_bracketPairColorizer2",
		"kind": "extension",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-16 22:24:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "settings > \"html attribute\" > forced-aligned",
		"category": "vscode",
		"extras": "",
		"front": "how to align attributes under each other",
		"id": 2744,
		"importId": "howToAlignAttributesUnderEachOther_settingsHtmlAttributeForcedAligned",
		"kind": "setting",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-16 22:24:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npx babel-node src/server.js",
		"category": "node",
		"extras": "",
		"front": "how to start express site with babel",
		"id": 2745,
		"importId": "howToStartExpressSiteWithBabel_npxBabelNodeSrcserverjs",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-18 00:03:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git reset -- */qstr.js` (note that `checkout ` doesn't always work)",
		"category": "git",
		"extras": "",
		"front": "how to undo changes in `qstr.js` file that is now in the workspace",
		"id": 2746,
		"importId": "howToUndoChangesInQstrjsFileThatIsNowInTheWorkspace_gitCheckoutQstrjs",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-05-18 08:57:07",
		"lastTested": "2020-05-18 08:57:07",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "5.0",
		"status": "learned",
		"systemWhenCreated": "2020-05-18 10:35:50",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clean -f test444.txt",
		"category": "git",
		"extras": "",
		"front": "remove the file `test444.txt` that you created in the workspace (e.g. you could also just `rm` it)",
		"id": 2747,
		"importId": "removeAFileThatYouCreatedInTheWorkspaceYouCouldAlsoJustRmIt_gitCleanFTest444txt",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-18 08:42:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.37",
		"status": "testing",
		"systemWhenCreated": "2020-05-18 11:00:17",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git stash --include-untracked ",
		"category": "git",
		"extras": "",
		"front": "quick store away (no name) all files in workspace and staging area, both newly created or already in Git",
		"id": 2748,
		"importId": "quickStoreAwayAllFilesInWorkspaceAndStagingAreaBothNewlyCreatedOrAlreadyInGit_gitStashIncludeUntracked",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-08 04:34:23",
		"lastTested": "2020-06-08 04:34:23",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.8",
		"status": "learned",
		"systemWhenCreated": "2020-05-18 16:18:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git stash push --include-untracked -m \"upload_change_half_done\"` (`git stash save ...` is deprecated), `git stash list`, `git show stash@{1}`, `git show stash@{1}^2`, `git show stash@{1}^3`, `git pop stash@{1}`, `git drop stash@{2}`",
		"category": "git",
		"extras": "",
		"front": "temporarily store all changes out of the way to `upload_change_half_done`, list, see files, and restore",
		"id": 2749,
		"importId": "temporarilyStoreAllChangesOutOfTheWayToUploadchangehalfdoneListSeeFilesAndRestore_gitStashPushIncludeUntrackedMUploadchangehalfdoneGitStashSaveIsDeprecatedGitStashListGitShowStash1GitShowStash12GitShowStash13GitPopStash1",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-07-29 03:46:23",
		"lastTested": "2020-07-29 03:46:23",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 16,
		"pronunciation": "",
		"rank": "5",
		"status": "learned",
		"systemWhenCreated": "2020-05-18 16:18:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Miranda and Haskell",
		"category": "general",
		"extras": "",
		"front": "two functional languages from 80s and 90s",
		"id": 2750,
		"importId": "twoFunctionalLanguagesFrom8sAnd9s_mirandaAndHaskell",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-18 17:26:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const { name, text } = req.body;",
		"category": "javascript ",
		"extras": "",
		"front": "define the two variables \"name\" and \"text\" from body \"req.body\"",
		"id": 2751,
		"importId": "defineTheTwoVariablesNameAndTextFromBodyReqbody_constNameTextReqbody",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-18 20:27:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `find . ! -path \"./node_modules/*\" ! -path \"./.git/*\" | grep -P \"\\.e?js$\" > files.txt` (`-P` means to interpret as Perl regular expression, egrep gets an error)",
		"category": "linux",
		"extras": "",
		"front": "create file of all `.js` and `.ejs` files recursively except in `node_modules` and `.git`",
		"id": 2752,
		"importId": "createFileOfAllJsAndEjsFilesRecursivelyExceptInNodemodules_findPathNodemodulesGrepPEjsFiletxtPMeansToInterpretAsPerlRegularExpression",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-29 04:43:08",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "3.7",
		"status": "testing",
		"systemWhenCreated": "2020-05-19 10:26:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `cat > test.txt` and CTRL-C to save",
		"category": "linux",
		"extras": "",
		"front": "how to create a quick multi-line file called `text.txt`",
		"id": 2753,
		"importId": "howToCreateAQuickMultiLineFileCalledTexttxt_catTesttxtAndCTRLCToSave",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-06-05 08:43:08",
		"lastTested": "2020-06-05 08:43:08",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.44",
		"status": "learned",
		"systemWhenCreated": "2020-05-20 23:15:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --pretty=format:\"%h %ci %s\" --before=\"2020-02-01\"",
		"category": "git",
		"extras": "",
		"front": "get list of commits at the end of January",
		"id": 2754,
		"importId": "getListOfCommitsAtTheEndOfJanuary_gitLogPrettyformathCiSBefore2221",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-03 03:09:05",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.37",
		"status": "testing",
		"systemWhenCreated": "2020-05-20 23:15:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "python -> instagram, bitbucket",
		"category": "dev",
		"extras": "",
		"front": "what language is django written in and what are two large projects",
		"id": 2755,
		"importId": "whatLanguageIsDjangoWrittenInAndWhatAreTwoLargeProjects_pythonInstagramBitbucket",
		"kind": "term",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-03 03:09:31",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.85",
		"status": "testing",
		"systemWhenCreated": "2020-05-20 23:15:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Tkinter (standard) and PyQt (more professional)",
		"category": "dev",
		"extras": "",
		"front": "two Python GUI toolkits",
		"id": 2756,
		"importId": "twoPythonGUIToolkits_tkinterStandardAndPyQtMoreProfessional",
		"kind": "tools",
		"labels": "",
		"lastLearned": "2020-06-08 06:01:46",
		"lastTested": "2020-06-08 06:01:46",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "3.98",
		"status": "learned",
		"systemWhenCreated": "2020-05-20 23:55:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` Pygame, 2000",
		"category": "python",
		"extras": "",
		"front": "cross-platform set of Python modules designed for writing video games, and when created",
		"id": 2757,
		"importId": "crossPlatformSetOfPythonModulesDesignedForWritingVideoGamesAndWhenCreated_pygame2",
		"kind": "history",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-21 13:08:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` **MATLAB** (1984, payware, training from 2018) which influenced: **Octave** (1988, free) and **Scilab** (1990, free, French)",
		"category": "python",
		"extras": "",
		"front": "three languages that python aimed to replace",
		"id": 2758,
		"importId": "threeLanguagesThatPythonAimedToReplace_mATLAB1984PaywareTrainingFrom218WhichInfluencedOctave1988FreeAndScilab199FreeFrench",
		"kind": "history",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-21 13:08:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "https://pypi.org",
		"category": "python",
		"extras": "",
		"front": "package index website",
		"id": 2759,
		"importId": "packageIndexWebsite_httpspypiorg",
		"kind": "term",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-21 13:08:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git show 3fbb5d4",
		"category": "git ",
		"extras": "",
		"front": "how to get detailed information on a commit in the past, e.g. after you show all commits at the end of January",
		"id": 2760,
		"importId": "howToGetDetailedInformationOnACommitInThePastEgAfterYouShowAllCommitsAtTheEndOfJanuary_gitShow3fbb5d4",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-22 10:49:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "hold down ALT, click on each place, and type",
		"category": "vscode",
		"extras": "",
		"front": "how to type the same code in two places at once",
		"id": 2761,
		"importId": "howToTypeTheSameCodeInTwoPlacesAtOnce_holdDownALTClickOnEachPlaceAndType",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-05-26 22:40:56",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "GraphQL",
		"category": "react",
		"extras": "",
		"front": "what can replace the need for Redux entirely",
		"id": 2762,
		"importId": "whatCanReplaceTheNeedForReduxEntirely_graphQL",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-05 07:23:56",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Heroku (Salesforce), Chief Architect Ruby",
		"category": "people",
		"extras": "",
		"front": "what company does Yukihiro \"Matz\" Matsumoto work for",
		"id": 2763,
		"importId": "whatCompanyDoesYukihiroMatzMatsumotoWorkFor_herokuSalesforceChiefArchitectRuby",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-05 21:45:15",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ul>lorem20*10",
		"category": "emmet",
		"extras": "",
		"front": "a ul with 10 li elements that have a lorem ipsum of 20 words each",
		"id": 2764,
		"importId": "aUlWith1LiElementsThatHaveALoremIpsumOf2WordsEach_ullorem21",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-06 00:11:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "numbers.slice()",
		"category": "javascript",
		"extras": "",
		"front": "how to get a copy of an array e.g. numbers",
		"id": 2765,
		"importId": "howToGetACopyOfAnArrayEgNumbers_numbersslice",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-23 06:02:43",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.02",
		"status": "testing",
		"systemWhenCreated": "2020-06-12 17:36:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "numbers.sort( (a,b) => a - b);",
		"category": "javascript",
		"extras": "",
		"front": "how to sort integers",
		"id": 2766,
		"importId": "howToSortIntegers_numberssortAbAB",
		"kind": "code",
		"labels": "",
		"lastLearned": "2020-07-01 06:17:51",
		"lastTested": "2020-07-01 06:17:51",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.41",
		"status": "learned",
		"systemWhenCreated": "2020-06-15 17:46:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const newNumbers = numbers.slice().sort( (a,b) => a - b);",
		"category": "javascript",
		"extras": "",
		"front": "how to sort array of numbers non-mutating to new array",
		"id": 2767,
		"importId": "howToSortArrayOfNumbersNonMutatingToNewArray_constNewNumbersNumbersslicesortAbAB",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-23 06:51:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.22",
		"status": "testing",
		"systemWhenCreated": "2020-06-15 18:03:02",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ul>li*10>lorem",
		"category": "emmet",
		"extras": "",
		"front": "ul with 10 li elements with sample text\t",
		"id": 2768,
		"importId": "ulWith1LiElementsWithSampleText_ulli1lorem",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-16 05:19:21",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Scala, Elm, ClojureScript, PureScript, ReasonML",
		"category": "javascript",
		"extras": "",
		"front": "five languages that compile to JavaScript",
		"id": 2769,
		"importId": "fourLanguagesThatCompileToJavaScript_scalaElmClojureScriptPureScript",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-06-26 03:48:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3",
		"status": "testing",
		"systemWhenCreated": "2020-06-23 12:00:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "return Number(String(x).split('').reverse().join(''));",
		"category": "JavaScript",
		"extras": "",
		"front": "how to reverse the digits in a number?",
		"id": 2770,
		"importId": "howToReverseTheDigitsInANumber_returnNumberStringxsplitreversejoin",
		"kind": "skill",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-06-23 15:52:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "String(\"00000\" + count).slice(-5);",
		"category": "javascript",
		"extras": "",
		"front": "how to pad a number with zeros as a string",
		"id": 2771,
		"importId": "howToPadANumberWithZerosAsAString_stringCountslice5",
		"kind": "skill",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-29 06:47:09",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.6",
		"status": "testing",
		"systemWhenCreated": "2020-06-25 15:10:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `const item = items[Math.floor(Math.random() * items.length)];` (note: add +1 for e.g. 1-10 random number)",
		"category": "javascript",
		"extras": "",
		"front": "get random item in array",
		"id": 2772,
		"importId": "getRandomItemInArray_constItemItemsMathfloorMathrandomItemslength",
		"kind": "skill",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:06:10",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 5,
		"pronunciation": "",
		"rank": "4.23",
		"status": "testing",
		"systemWhenCreated": "2020-06-25 15:57:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` short form: `ls -d */` (slash necessary), long form: `ls -l | egrep ^d`",
		"category": "linux",
		"extras": "",
		"front": "how to list only directories, short and long form",
		"id": 2774,
		"importId": "howToListOnlyDirectoriesShortAndLongForm_shortFormLsDLongForm",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-13 03:12:42",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 8,
		"pronunciation": "",
		"rank": "4.83",
		"status": "testing",
		"systemWhenCreated": "2020-06-30 17:28:36",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `ls -l | egrep -v '^d'` (-v = inverse match)",
		"category": "linux",
		"extras": "",
		"front": "how to list only files",
		"id": 2775,
		"importId": "howToListOnlyFiles_lsLEgrepVDVInverseMatch",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-07-29 04:23:44",
		"lastTested": "2020-07-29 04:23:44",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.66",
		"status": "learned",
		"systemWhenCreated": "2020-07-03 11:49:48",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select it, [[CTRL-F2]]",
		"category": "vscode",
		"extras": "",
		"front": "how to change the name of numerous instances of a variable",
		"id": 2776,
		"importId": "howToChangeTheNameOfNumerousInstancesOfAVariable_selectItCTRLF2",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-03 14:45:13",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm config get prefix",
		"category": "npm",
		"extras": "",
		"front": "how to find out the path for all global npm commands, e.g. to add to environment variables",
		"id": 2778,
		"importId": "howToFindOutThePathForAllGlobalNpmCommandsEgToAddToEnvironmentVariables_npmConfigGetPrefix",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:59:02",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "3.79",
		"status": "testing",
		"systemWhenCreated": "2020-07-20 10:52:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git diff master..et/enh/include-flashcards-in-home",
		"category": "git",
		"extras": "",
		"front": "How to get change differences between master and work branch",
		"id": 2779,
		"importId": "howToGetChangeDifferencesBetweenMasterAndWorkBranch_gitLogOnelineMasteretenhincludeFlashcardsInHome",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-27 04:11:21",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.58",
		"status": "testing",
		"systemWhenCreated": "2020-07-22 15:35:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-SHIFT-P",
		"category": "atom",
		"extras": "",
		"front": "get search list of all commands",
		"id": 2780,
		"importId": "getSearchListOfAllCommands_ctrl shift p",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 15:35:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git branch",
		"category": "git",
		"extras": "",
		"front": "list local branches",
		"id": 2781,
		"importId": "listLocalBranches_gitBranch",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-27 04:52:27",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.47",
		"status": "testing",
		"systemWhenCreated": "2020-07-22 15:54:22",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-B",
		"category": "Atom",
		"extras": "",
		"front": "search open files with keyword",
		"id": 2782,
		"importId": "searchOpenFilesWithKeyword_ctrl b",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 16:56:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-T",
		"category": "Atom",
		"extras": "",
		"front": "find any file in the project fast",
		"id": 2783,
		"importId": "findAnyFileInTheProjectFast_ctrl t",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 16:56:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `CTRL-K, right-arrow` then `CTRL-K, down-arrow`  or simply drag panes around ",
		"category": "Atom",
		"extras": "",
		"front": "open up second and third pane for same file",
		"id": 2784,
		"importId": "openUpSecondAndThirdPaneForSameFile_cTRLKRightArrowThenCTRLKDownArrowOrSimplyDragPanesAround",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 16:56:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-R",
		"category": "Atom",
		"extras": "",
		"front": "go quickly to methods in JavaScript file",
		"id": 2785,
		"importId": "goQuicklyToMethodsInJavaScriptFile_ctrl r",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 17:20:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` set: `CTRL-ALT-F2`, goto: `CTRL-F2`",
		"category": "Atom",
		"extras": "",
		"front": "set and go to bookmarks",
		"id": 2786,
		"importId": "setAndGoToBookmarks_setCTRLALTF2GotoCTRLF2",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 17:20:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "https://unsplash.com",
		"category": "webdesign",
		"extras": "",
		"front": "where to get free photos",
		"id": 2787,
		"importId": "whereToGetFreePhotos_httpsunsplashcom",
		"kind": "Online Tool",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-22 19:05:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ALT-select each one, then change",
		"category": "vscode",
		"extras": "",
		"front": "change multiple areas of text at a time",
		"id": 2788,
		"importId": "changeMultipleAreasOfTextAtATime_aLTSelectEachOneThenChange",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-28 20:34:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "require('crypto').randomBytes(5).toString('hex');",
		"category": "javascript",
		"extras": "",
		"front": "how to produce a 10-digit random idCode, e.g. with letters (a-f) and numbers",
		"id": 2789,
		"importId": "howToProduceARandomIdCode_requirecryptorandomBytes1toStringhex",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-29 04:23:22",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2020-07-28 21:17:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find . ! -path \"./node_modules/*\" ! -path \"./.git/*\" | grep -P \"\\.html?$\"",
		"category": "linux",
		"extras": "",
		"front": "how to list all `.htm` and `.html` files except in the directorys `node_modules` and `.git` to a file",
		"id": 2790,
		"importId": "howToListAllHtmAndHtmlFilesExceptInTheDirectorysNodemodulesAndGitToAFile_findPathNodemodulesPathGitGrepPHtml",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:05:45",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.42",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 10:49:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git show HEAD",
		"category": "git",
		"extras": "",
		"front": "how to see changes in files that you just committed locally",
		"id": 2791,
		"importId": "howToSeeChangesInFilesThatYouHaveCommittedLocally_gitShowHEAD",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:04:56",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.58",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 15:13:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git help ls-tree",
		"category": "git",
		"extras": "",
		"front": "how to get help on e.g. ls-tree",
		"id": 2792,
		"importId": "howToGetHelpOnEgLsTree_gitHelpLsTree",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-31 03:56:28",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.94",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --graph --decorate -30 --all --date-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset%C(auto)%d %s'",
		"category": "git",
		"extras": "",
		"front": "show extensive text-graphic display of log",
		"id": 2793,
		"importId": "showExtensiveTextGraphicDisplayOfLog_gitLogGraphDecorate3AllDateOrderDateformatYMDHMSPrettyformatCcyanhCresetCblackBoldadCresetCautodS",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "parked",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "\"log\": \"git log --pretty=format:\\\"%h - %ad - %s\\\" -10 --date=format:\\\"%Y-%m-%d %H:%M:%S\\\"\"",
		"category": "git",
		"extras": "",
		"front": "npm script for: list last 10 commit with dates ",
		"id": 2794,
		"importId": "npmScriptForSimpleGitLog_logGitLogPrettyformathCiS1",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-31 09:29:36",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.79",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --graph",
		"category": "git",
		"extras": "",
		"front": "how to show log as text graph but with infos",
		"id": 2795,
		"importId": "howToShowLogAsTextGraphButWithInfos_gitLogGraph",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-07-31 09:53:15",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.16",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git log -p` (p = patch)",
		"category": "git",
		"extras": "",
		"front": "show all changes from past commits",
		"id": 2796,
		"importId": "showAllChangesFromPastCommites_gitLogPPPatch",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-04 05:06:55",
		"lastTested": "2020-08-04 05:06:55",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "5.0",
		"status": "learned",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log --graph --all --oneline --decorate",
		"category": "git",
		"extras": "",
		"front": "simple command to get text graph of branches in log",
		"id": 2797,
		"importId": "simpleCommandToGetTextGraphOfBranchesInLog_gitLogGraphAllOnelineDecorate",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:58:20",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.88",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git log -3",
		"category": "git",
		"extras": "",
		"front": "list the last three commits",
		"id": 2798,
		"importId": "listTheLastThreeCommits_gitLog3",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-05 04:58:25",
		"lastTested": "2020-08-05 04:58:25",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "3.86",
		"status": "learned",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git ls-tree HEAD^ system/` (don't forget the / at the end)",
		"category": "git",
		"extras": "",
		"front": "how to see the contents of the directory `system` in the commit before the last one",
		"id": 2799,
		"importId": "howToSeeTheContentsOfTheDirectorySystemInTheCommitBeforeTheLastOne_gitLsTreeHEADSystem",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:04:49",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 4,
		"pronunciation": "",
		"rank": "4.76",
		"status": "testing",
		"systemWhenCreated": "2020-07-29 17:35:24",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` go to empty directory create react app in directory: `npx create-react-app .` then `npm start`",
		"category": "react",
		"extras": "",
		"front": "how to create and run a react app in a directory",
		"id": 2800,
		"importId": "howToCreateAndRunAReactAppInADirectory_goToEmptyDirectoryCreateReactAppInDirectoryNpxCreateReactAppThenNpmStart",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-30 09:15:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "npm -g outdated",
		"category": "npm",
		"extras": "",
		"front": "how to see what global installs need to be updated",
		"id": 2801,
		"importId": "howToSeeWhatGlobalInstallsNeedToBeUpdated_npmGOutdated",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-03 03:59:05",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.56",
		"status": "testing",
		"systemWhenCreated": "2020-07-30 09:15:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ls -d */s*",
		"category": "linux",
		"extras": "",
		"front": "how to list all directories at any level that start with \"s\"",
		"id": 2802,
		"importId": "howToListAllDirectoriesThatStartWithG_lsDG",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-03 04:34:27",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.56",
		"status": "testing",
		"systemWhenCreated": "2020-07-31 07:00:08",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git clean -f test444.txt",
		"category": "git",
		"extras": "",
		"front": "what is the git version of deleting a file (e.g. `rm test444.txt`) that you added to the workspace",
		"id": 2803,
		"importId": "removeAFileThatYouCreatedInTheWorkspaceYouCouldAlsoJustRmIt_gitCleanFTest444txt",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-05-18 08:42:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.37",
		"status": "testing",
		"systemWhenCreated": "2020-07-31 13:22:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "history | grep all$",
		"category": "linux",
		"extras": "",
		"front": "find previous command you used that ends with `all`",
		"id": 2804,
		"importId": "findPreviousCommandYouUsedThatEndsWithAll_historyGrepAll",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-05 04:29:34",
		"lastTested": "2020-08-05 04:29:34",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.46",
		"status": "learned",
		"systemWhenCreated": "2020-07-31 14:00:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git add . && git commit -m \"second commit\"",
		"category": "gif",
		"extras": "",
		"front": "how to add and commit all tracked and untracked files",
		"id": 2805,
		"importId": "howToAddAndCommitAllTrackedAndUntrackedFiles_gitAddGitCommitMSecondCommit",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-07-31 15:57:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git diff master..et-test-change-one-thing --color-words",
		"category": "git",
		"extras": "",
		"front": "how to list changes between branches and show changes on one line (easy to read)",
		"id": 2806,
		"importId": "howToListChangesBetweenBranchesAndShowChangesOnOneLineEasyToRead_gitDiffMasteretTestChangeOneThingColorWords",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:05:03",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.49",
		"status": "testing",
		"systemWhenCreated": "2020-07-31 17:04:54",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` go to branch, then: `git branch -m et-test-new-name` (note: only rename branches before you start sharing them with other people), `-m` for move",
		"category": "git",
		"extras": "",
		"front": "how to change name of branch",
		"id": 2807,
		"importId": "howToChangeNameOfBranch_goToBranchThenGitBranchMEtTestNewNameNoteOnlyRenameBranchesBeforeYouStartSharingThemWithOtherPeople",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-03 09:20:53",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.49",
		"status": "testing",
		"systemWhenCreated": "2020-07-31 17:04:54",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "grep for */qstr.js -n",
		"category": "linux",
		"extras": "",
		"front": "find all lines that have \"for\" in them in a file called `qstr.js` which is somewhere in any directory, with line numbers",
		"id": 2808,
		"importId": "findAllLinesThatHaveForInThemInAFileCalledQstrjsWhichIsSomewhereInAnyDirectoryWithLineNumbers_grepForQstrjsN",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-03 09:21:24",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.74",
		"status": "testing",
		"systemWhenCreated": "2020-08-03 14:22:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "grep for */qstr.js -c",
		"category": "linux",
		"extras": "",
		"front": "count how many times \"for\" occurs in a file called `qstr.js` that is somewhere in a directory",
		"id": 2810,
		"importId": "countHowManyTimeForOccursInAFileCalledQstrjsThatIsSomewhereInADirectory_grepForQstrjsC",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:05:55",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.41",
		"status": "testing",
		"systemWhenCreated": "2020-08-03 14:22:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "grep -ri \\bname\\b qtools",
		"category": "linux ",
		"extras": "",
		"front": "search in all files in the directory `qtools` for the whole word `name` or `Name` (but not e.g. `firstName` or `names`)",
		"id": 2812,
		"importId": "searchInAllFilesInTheDirectoryQtoolsForTheWholeWordNameOrNameButNotEgFirstNameOrNames_grepRiBnamebQtools",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-03 14:40:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reset --hard nnnnnn",
		"category": "git",
		"extras": "",
		"front": "how to restore to a certain commit",
		"id": 2813,
		"importId": "howToRestoreToACertainCommit_gitResetHardNnnnnn",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-05 04:28:51",
		"lastTested": "2020-08-05 04:28:51",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.55",
		"status": "learned",
		"systemWhenCreated": "2020-08-03 16:46:03",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` when you want collapse several commits into one",
		"category": "git",
		"extras": "",
		"front": "when would you use `git reset soft`?",
		"id": 2814,
		"importId": "whenWouldYouUseGitResetSoft_whenYouWantCollapseSeveralCommitsIntoOne",
		"kind": "strategy",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-04 05:06:44",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.5",
		"status": "testing",
		"systemWhenCreated": "2020-08-03 16:46:03",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Ruby and Go, respectively",
		"category": "serverless",
		"extras": "",
		"front": "what languages do Jekyll and Hugo run on",
		"id": 2815,
		"importId": "whatLanguagesDoJekyllAndHugoRunOn_rubyAndGoRespectively",
		"kind": "fact",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-03 17:25:02",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `egrep -rn require\\(.+qsys.+\\) --exclude-dir=\"node_modules\" .` -r = recursive, -n = line numbers",
		"category": "linux",
		"extras": "",
		"front": "list all files in any subdirectory which has `require(...qsys...)` in them, except in node_modules",
		"id": 2816,
		"importId": "listAllFilesInAnySubdirectoryWhichHasRequireqsysInThemExceptInNodemodules_egrepRnRequireqsysExcludeDirnodemodules",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-10 04:01:31",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 3,
		"pronunciation": "",
		"rank": "4.82",
		"status": "testing",
		"systemWhenCreated": "2020-08-04 11:16:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `egrep -rn require\\(.+qsys.+\\) qtools` (notice that `grep` won't work)",
		"category": "linux",
		"extras": "",
		"front": "list all files in `qtools` which have `require(...qsys...)` in them",
		"id": 2817,
		"importId": "listAllFilesInQtoolsWhichHaveRequireqsysInThem_egrepRnRequireqsysQtoolsNoticeThatGrepWontWork",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:05:15",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.49",
		"status": "testing",
		"systemWhenCreated": "2020-08-04 11:16:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "egrep -rn required.+true --exclude-dir=node_modules --include=*.js --exclude=*min*",
		"category": "linux",
		"extras": "",
		"front": "list all files that have \"required....true\" EXCEPT in node_modules, EXCEPT the file ...min... and only in .js files",
		"id": 2818,
		"importId": "listAllFilesThatHaveRequiredtrueEXCEPTInNodemodulesEXCEPTTheFileMinAndOnlyInJsFiles_egrepRnRequiredtrueExcludeDirnodemodulesIncludejsExcludemin",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-09 03:57:14",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 6,
		"pronunciation": "",
		"rank": "4.9",
		"status": "testing",
		"systemWhenCreated": "2020-08-04 11:16:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "egrep -rni \"batch.+blocks\" --exclude-dir=\"node_modules\"",
		"category": "linux",
		"extras": "",
		"front": "list all files in project that have e.g. `batchImportBlocks` or `batchExportBlocks`, except in node_modules",
		"id": 2819,
		"importId": "listAllFilesInProjectThatHaveEgBatchImportBlocksOrBatchExportBlocksExceptInNodemodules_egrepRniBatchblocksExcludeDirnodemodules",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:23:16",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.04",
		"status": "testing",
		"systemWhenCreated": "2020-08-04 11:16:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `npm -g up gatsby-cli` (find out which need updating with: `npm -g outdated`)",
		"category": "npm",
		"extras": "",
		"front": "how to update a global package, e.g. gatsby-cli",
		"id": 2820,
		"importId": "howToUpdateAGlobalPackage_npmGUpGatsbyCliFindOutWhichNeedUpdatingWithNpmGOutdated",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-05 04:23:59",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.88",
		"status": "testing",
		"systemWhenCreated": "2020-08-05 09:20:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `egrep -rni \"super\\(.*id.*\\)\" --exclude-dir=node_modules` note that you need the quotation marks around the regex",
		"category": "linux",
		"extras": "",
		"front": "find all files that have super(..id..) in them, except in node_modules",
		"id": 2821,
		"importId": "findAllFilesThatHaveSuperidInThemExceptInNodemodules_egrepRniSuperidExcludeDirnodemodulesNoteThatYouNeedTheQuotationMarksAroundTheRegex",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-09 03:56:42",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 7,
		"pronunciation": "",
		"rank": "4.97",
		"status": "testing",
		"systemWhenCreated": "2020-08-05 10:16:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `git add *` and `git reset *`",
		"category": "git",
		"extras": "",
		"front": "two commands to (1) add all changes to staged, (2) take them all back",
		"id": 2822,
		"importId": "twoCommandsTo1AddAllChangesToStaged2TakeThemAllBack_gitAddAndGitReset",
		"kind": "command",
		"labels": "",
		"lastLearned": "2020-08-07 05:11:24",
		"lastTested": "2020-08-07 05:11:24",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 1,
		"numberOfTimesTested": 2,
		"pronunciation": "",
		"rank": "4.91",
		"status": "learned",
		"systemWhenCreated": "2020-08-05 17:30:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `history | grep -P \"^\\s*\\d*\\s*git\"` (note egrep don't work since it doesn't have \\d apparently but [[:digit:]])",
		"category": "linux",
		"extras": "",
		"front": "how to list all commands in history that start with `ls`",
		"id": 2823,
		"importId": "howToListAllCommandsInHistoryThatStartWithLs_historyGrepPSdsgitNoteEgrepDontWorkSinceItDoesntHaveDApparentlyButDigit",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-06 07:03:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.3",
		"status": "testing",
		"systemWhenCreated": "2020-08-05 17:30:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "click start and type `winver`",
		"category": "windows",
		"extras": "",
		"front": "how to determine windows version, e.g. 1607, 1909, etc. \t",
		"id": 2824,
		"importId": "howToDetermineWindowsVersionEg167199Etc_clickStartAndTypeWinver",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-06 00:08:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout -b 01_02b origin/01_02b",
		"category": "git",
		"extras": "",
		"front": "how to pull a remote branch down and switch to it",
		"id": 2826,
		"importId": "howToPullARemoteBranchDownAndSwitchToIt_gitCheckoutB12bOrigin12b",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-08-10 04:01:57",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.72",
		"status": "testing",
		"systemWhenCreated": "2020-08-07 19:07:44",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "http://portquiz.net:27017",
		"category": "network",
		"extras": "",
		"front": "how to check if your point to access e.g. port 27017",
		"id": 2827,
		"importId": "howToCheckIfYourPointToAccessEgPort2717_httpportquiznet2717",
		"kind": "tool",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-07 23:30:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "search for `^\\s` and replace with nothing",
		"category": "Notepad++",
		"extras": "",
		"front": "how to remove all blank lines",
		"id": 2828,
		"importId": "howToRemoveAllBlankLines_searchForSAndReplaceWithNothing",
		"kind": "regex",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-11 10:58:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "(run windows cmd as administrator)\nnetstat -ano | findstr :3001\n(shows LISTENING NNNNN)\ntaskkill /PID NNNN /F",
		"category": "windows",
		"extras": "",
		"front": "how to kill a process listening to a port",
		"id": 2829,
		"importId": "howToKillAProcessListeningToAPort_runWindowsCmdAsAdministratornetstatAnoFindstr31showsLISTENINGNNNNNtaskkillPIDNNNNF",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-12 04:20:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const Header = ({ title }) => { \n\treturn (",
		"category": "React",
		"extras": "",
		"front": "what is the syntax of a function component",
		"id": 2830,
		"importId": "whatIsTheSyntaxOfAFunctionComponent_constHeaderTitleReturn",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-12 15:05:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` include the statement `debugger;` in the text",
		"category": "developerPanel",
		"extras": "",
		"front": "how debug through code",
		"id": 2831,
		"importId": "howDebugThroughCode_includeTheStatementDebuggerInTheText",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-12 15:05:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "class Header extends React.Component { \n\trender() {",
		"category": "React",
		"extras": "",
		"front": "what is the syntax of a class component",
		"id": 2832,
		"importId": "whatIsTheSyntaxOfAClassComponent_classHeaderExtendsReactComponentRender",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-12 15:05:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git checkout head .",
		"category": "git ",
		"extras": "",
		"front": "if you've deleted files to workspace, how can you get them back",
		"id": 2833,
		"importId": "ifYouveDeletedFilesToWorkspaceHowCanYouGetThemBack_gitCheckoutHead",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-13 16:08:06",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `find public -mindepth 1 -delete` then `git checkout head public`",
		"category": "git",
		"extras": "",
		"front": "delete all files from directory (`public`) to workspace, then pull them back from workspace",
		"id": 2834,
		"importId": "deleteAllFilesFromDirectoryPublicToWorkspaceThenPullThemBackFromWorkspace_findPublicMindepth1DeleteThenGitCheckoutHeadPublic",
		"kind": "paired command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-09 03:37:44",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.63",
		"status": "testing",
		"systemWhenCreated": "2020-08-13 16:08:06",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "find dist -mindepth 1 -delete",
		"category": "linux",
		"extras": "",
		"front": "delete all files recursively in a directory (e.g. `dist`) without deleting the directory",
		"id": 2835,
		"importId": "deleteAllFilesRecursivelyInADirectoryEgDistWithoutDeletingTheDirectory_findDistMindepth1Delete",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-09 03:48:19",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.26",
		"status": "testing",
		"systemWhenCreated": "2020-08-13 16:08:06",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "[[ctrl-,]], alwaysShowRepositories, check it",
		"category": "vscode",
		"extras": "",
		"front": "how to make the respository name always appear",
		"id": 2836,
		"importId": "howToMakeTheRespositoryNameAlwaysAppear_ctrlAlwaysShowRepositoriesCheckIt",
		"kind": "setting",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-08-14 21:01:33",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`git commit --amend -m \"get jquery test to work\"",
		"category": "git",
		"extras": "",
		"front": "rename the commit message you just committed",
		"id": 2837,
		"importId": "gitCommitAmendMGetJqueryTestToWork_",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-09 03:51:49",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.4",
		"status": "testing",
		"systemWhenCreated": "2020-08-20 05:52:40",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-SHIFT-C",
		"category": "vscode",
		"extras": "",
		"front": "open command line window in project directory",
		"id": 2838,
		"importId": "openCommandLineWindowInProjectDirectory_ctrl shift c",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-01 17:09:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `ctrl-`, `scrollToSwitchTabs`, then mouse wheel on tabs",
		"category": "vscode",
		"extras": "",
		"front": "flip between tabs easily",
		"id": 2839,
		"importId": "flipBetweenTabsEasily_ctrlScrollToSwitchTabsThenMouseWheelOnTabs",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-01 17:09:47",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Dries Buytaert, 2001",
		"category": "php",
		"extras": "",
		"front": "who wrote Drupal and when",
		"id": 2840,
		"importId": "whoWroteDrupalAndWhen_driesBuytaert21",
		"kind": "people",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-03 23:38:53",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CakePHP",
		"category": "php",
		"extras": "",
		"front": "which framework was inspired by Ruby on Rails",
		"id": 2841,
		"importId": "whichFrameworkWasInspiredByRubyOnRails_cakePHP",
		"kind": "frameworks",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-04 11:13:05",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CakePHP",
		"category": "php",
		"extras": "",
		"front": "which framework was started by a Polish programmer",
		"id": 2842,
		"importId": "whichFrameworkWasStartedByAPolishProgrammer_cakePHP",
		"kind": "frameworks",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-04 11:13:05",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `months.splice(1, 0, 'Feb');` (insert before position 1, and delete nothing)",
		"category": "javascript",
		"extras": "",
		"front": "How to insert \"February\" in array: `const months = ['Jan', 'March', 'April', 'June'];`\t",
		"id": 2843,
		"importId": "howToInsertFebruaryInArrayConstMonthsJanMarchAprilJune_monthssplice1FebInsertBeforePosition1AndDeleteNothing",
		"kind": "functions",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-09 03:53:38",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2020-09-07 14:45:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `const result = months.splice(4,1,'May');` (insert before position 4, and delete 1, return \"nnn\")",
		"category": "javascript",
		"extras": "",
		"front": "How to replace \"nnn\" with \"May\" in array: `const months = ['Jan', 'February', 'March', 'April', 'nnn', 'June'];`",
		"id": 2844,
		"importId": "howToReplaceNnnWithMayInArrayConstMonthsJanFebruaryMarchAprilNnnJune_constResultMonthssplice41MayInsertBeforePosition4AndDelete1ReturnNnn",
		"kind": "functions",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-09 03:56:00",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.13",
		"status": "testing",
		"systemWhenCreated": "2020-09-07 14:45:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "in environment variables, copy the the contents of `NODE_PATH` to `PATH`, e.g. `C:\\Users\\ADMIN\\AppData\\Roaming\\npm`\t",
		"category": "npm",
		"extras": "",
		"front": "if globally installed npm packages are not found at the command line",
		"id": 2845,
		"importId": "ifGloballyInstalledNpmPackagesAreNotFoundAtTheCommandLine_inEnvironmentVariablesCopyTheTheContentsOfNODEPATHToPATHEgCUsersADMINAppDataRoamingnpm",
		"kind": "fix",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-09 03:56:12",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.31",
		"status": "testing",
		"systemWhenCreated": "2020-09-07 21:45:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "^(?!http).*",
		"category": "regex",
		"extras": "",
		"front": "all lines that do not start with `http`",
		"id": 2846,
		"importId": "http_",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-07 21:45:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `locate systemClasses` (this works quite well to find anything on Ubuntu) ",
		"category": "linux",
		"extras": "",
		"front": "how to find a directory anywhere on the system, e.g. `systemClasses`, or even part of a file e.g. `.list`",
		"id": 2847,
		"importId": "howToFindADirectoryAnywhereOnTheSystemSearchInPathEgSystemClasses_locateSystemClasses",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-28 04:13:09",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.88",
		"status": "testing",
		"systemWhenCreated": "2020-09-09 14:27:03",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `locate *.h` or `find / -name *.h` (both work well)",
		"category": "linux",
		"extras": "",
		"front": "how to find all `.h` files on system",
		"id": 2848,
		"importId": "howToFindAllHFilesOnSystem_locateHOrFindNameH",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-28 04:14:29",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.72",
		"status": "testing",
		"systemWhenCreated": "2020-09-09 14:27:03",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` only directories: `ls -al | grep ^d`, only files: `ls -al | grep ^d -v` (-v means inverse)",
		"category": "linux",
		"extras": "",
		"front": "how to list **only directories** or **only files** in a directory",
		"id": 2849,
		"importId": "howToListOnlyFilesInDirectory_lsPGrepVVInvertSearchAnythingOtherThanPWillListFilesAndDirectoriesOrLsAlGrepDV",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-28 04:19:11",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "5",
		"status": "testing",
		"systemWhenCreated": "2020-09-09 14:28:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `egrep -rni \"action_.{5,7}Item\" --exclude-dir=node_modules` (`-r` recursive, `-n` line number, `-i` case-insensitive)",
		"category": "linux",
		"extras": "",
		"front": "find all files recursively (except in `node_modules`) which have e.g. `action_deleteItem` or `action_getPageItemInfo` in them",
		"id": 2850,
		"importId": "findAllFilesRecursivelyExceptInNodemodulesWhichHaveEgActiondeleteItemOrActiongetPageItemInfoInThem_egrepRniAction57ItemExcludeDirnodemodulesRRecursiveNLineNumberICaseInsensitive",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-28 04:19:47",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.99",
		"status": "testing",
		"systemWhenCreated": "2020-09-10 11:22:30",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `background: linear-gradient(30deg, lighten($table_head_col, 40%) 10%, $table_head_col 100%);` (note you can change `$table_head_col` and both colors will change)",
		"category": "sass",
		"extras": "",
		"front": "how to have two colors in an e.g. H1 gradient be based on one color, one lighter than the other",
		"id": 2851,
		"importId": "howToHaveTwoColorsInAnEgH1GradientBeBasedOnOneColorOneLighterThanTheOther_backgroundLinearGradient3degLightentableheadcol41Tableheadcol1NoteYouCanChangeTableheadcolAndBothColorsWillChange",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-10 17:05:48",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` tested on Ubuntu, works well, change to Berlin: `sudo timedatectl set-timezone Europe/Berlin`, and then to London: `sudo timedatectl set-timezone Europe/London` ",
		"category": "linux",
		"extras": "",
		"front": "how to change timezone to Berlin (or London)",
		"id": 2852,
		"importId": "howToChangeTimezoneToBerlin_sudoTimedatectlSetTimezoneEuropeBerlin",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-28 04:21:56",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.01",
		"status": "testing",
		"systemWhenCreated": "2020-09-13 03:00:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` [Cacti](https://en.wikipedia.org/wiki/Cacti_(software)) (2001, cross-platform), Ngios, Prometheus, New Relic, Splunk, PagerDuty",
		"category": "linux",
		"extras": "",
		"front": "six tools for aggregating logs of a fleet of servers",
		"id": 2853,
		"importId": "sixToolsForAggregatingLogsOfAFleetOfServers_cactiNgiosPrometheusNewRelicSplunkPagerDuty",
		"kind": "tools",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-28 04:25:36",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.52",
		"status": "testing",
		"systemWhenCreated": "2020-09-13 03:00:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `cat /var/log/syslog | grep DHCP` or `cat /var/log/syslog | grep Berlin`",
		"category": "linux",
		"extras": "",
		"front": "how to search system logs for \"DHCP\" or \"Berlin\" to see when timezone was changed to Berlin",
		"id": 2854,
		"importId": "howToSearchSystemLogsForDHCP_catVarlogsyslogGrepDHCP",
		"kind": "info",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-28 04:29:50",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "3.22",
		"status": "testing",
		"systemWhenCreated": "2020-09-13 03:00:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`man ps | grep -- -h`",
		"category": "linux",
		"extras": "",
		"front": "how to grep a man page",
		"id": 2855,
		"importId": "howToGrepAManPage_manPsGrepH",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "2020-09-28 04:30:33",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 1,
		"pronunciation": "",
		"rank": "4.95",
		"status": "testing",
		"systemWhenCreated": "2020-09-13 09:00:54",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "=TEXT(I18;\"MMMM\")",
		"category": "excel",
		"extras": "",
		"front": "how to show month name of date",
		"id": 2861,
		"importId": "howToShowMonthNameOfDate_=text(i18;\"mmmm\")",
		"kind": "function",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-29 15:34:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `=FINDEN(M18;J18)` (returns the position, starting with 1)",
		"category": "excel",
		"extras": "",
		"front": "how to find out if the text in one cell is in another cell",
		"id": 2862,
		"importId": "howToFindOutIfTheTextInOneCellIsInAnotherCell_fINDENM18J18ReturnsThePositionStartingWith1",
		"kind": "function",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-09-29 15:34:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Private Sub UserForm_Initialize()\n\tMe.Caption = \"Opened at \" & Time()\nEnd Sub",
		"category": "vba",
		"extras": "",
		"front": "change form caption upon opening",
		"id": 2863,
		"importId": "changeFormCaptionUponOpening_privateSubUserFormInitializeMeCaptionOpenedAtTimeEndSub",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "testing",
		"systemWhenCreated": "2020-09-28 06:39:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "in VBA editor, *Tools > Options > Automatic Syntax Checking*",
		"category": "vba",
		"extras": "",
		"front": "turn off syntax check",
		"id": 2864,
		"importId": "turnOffSyntaxCheck_inVBAEditorToolsOptionsAutomaticSyntaxChecking",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-03 08:48:52",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Option Explicit",
		"category": "vba",
		"extras": "",
		"front": "force variables to be defined",
		"id": 2865,
		"importId": "forceVariablesToBeDefined_optionExplicit",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-03 08:48:52",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "press and hold down CTRL-F4",
		"category": "vba",
		"extras": "",
		"front": "how to close all code windows",
		"id": 2866,
		"importId": "howToCloseAllCodeWindows_pressAndHoldDownCTRLF4",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-06 23:41:46",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "always use `Set`",
		"category": "vba",
		"extras": "",
		"front": "what do you have to remember about assigning objects",
		"id": 2867,
		"importId": "whatDoYouHaveToRememberAboutAssigningObjects_alwaysUseSet",
		"kind": "rule",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-12 14:59:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `strAddress = ActiveCell.CurrentRegion.Address` will return e.g. `$A$1$:C$15`",
		"category": "Excel VBA",
		"extras": "",
		"front": "How to select current region (boundaried table)",
		"id": 2868,
		"importId": "howToSelectCurrentRegionBoundariedTable_strAddressActiveCellCurrentRegionAddressWillReturnEgA1C15",
		"kind": "Code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-14 00:26:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-SHIFT-8",
		"category": "Excel",
		"extras": "",
		"front": "select current table",
		"id": 2869,
		"importId": "selectCurrentTable_ctrl shift 8",
		"kind": "Shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-14 00:26:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "=VALUE(F3)",
		"category": "Google Sheets",
		"extras": "",
		"front": "how to convert string to number",
		"id": 2870,
		"importId": "howToConvertStringToNumber_=value(f3)",
		"kind": "function",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-15 22:16:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ALT-Enter",
		"category": "vscode",
		"extras": "",
		"front": "in middle of line, enter line below and type",
		"id": 2871,
		"importId": "inMiddleOfLineEnterLineBelowAndType_aLTEnter",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-22 16:28:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "```App.css: `Body {background-image: url(\"./images/background.jpg\");}`, and put image in /src/images/background.jpg, this also works in build",
		"category": "react",
		"extras": "",
		"front": "how to set a background image in React",
		"id": 2872,
		"importId": "howToSetABackgroundImageInReact_appcssBodyBackgroundImageUrlimagesbackgroundjpgAndPutImageInSrcimagesbackgroundjpgThisAlsoWorksInBuild",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-24 22:03:35",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "````lorem100` for 100 words of Lorem ipsum text",
		"category": "emmet",
		"extras": "",
		"front": "How to produce a long Lorem ipsum Latin-like filler text",
		"id": 2873,
		"importId": "howToProduceALongLoremIpsumLatinLikeFillerText_lorem1For1WordsOfLoremIpsumText",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-25 09:55:17",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "keep in pan mode then use the mouse roller for zoom and orbit",
		"category": "sketchup",
		"extras": "",
		"front": "how to best navigate",
		"id": 2874,
		"importId": "howToBestNavigate_keepInPanModeThenUseTheMouseRollerForZoomAndOrbit",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": 0,
		"numberOfTimesTested": 0,
		"pronunciation": "",
		"rank": "2.5",
		"status": "new",
		"systemWhenCreated": "2020-10-28 07:26:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`var expresion2 = /[^01]/;`\n`console.log(expresion2.test('1010100100110001'));` \nNote that this returns true if there is anything other than a 0 or 1, i.e. true if not binary.",
		"category": "regex",
		"extras": "$regex101=r/S2plSP/2",
		"front": "Check if a number is binary",
		"id": 2875,
		"importId": "",
		"kind": "rule",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-08 00:24:21",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Shift-ALT, click-drag\t\t",
		"category": "Notepad++",
		"extras": "",
		"front": "create vertical cursor to type the same text into numerous lines",
		"id": 2876,
		"importId": "",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-14 12:30:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "Shift-ALT, click-drag\t\t",
		"category": "vscode",
		"extras": "",
		"front": "create vertical cursor to type the same text into numerous lines",
		"id": 2877,
		"importId": "",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-14 12:30:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ul>li*5>{This is test #$ of the list.}",
		"category": "emmet",
		"extras": "",
		"front": "make a UL/LI list with text that has an incrementing number",
		"id": 2878,
		"importId": "",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-14 12:30:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `u` and [[CTRL-r]]",
		"category": "vim",
		"extras": "",
		"front": "undo and redo",
		"id": 2879,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.9967",
		"status": "",
		"systemWhenCreated": "2020-11-15 11:50:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "gUU",
		"category": "vim",
		"extras": "",
		"front": "change current line to uppercase regardless where the cursor is on line",
		"id": 2880,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.867",
		"status": "",
		"systemWhenCreated": "2020-11-15 12:05:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "guu",
		"category": "vim",
		"extras": "",
		"front": "change current line to lowercase regardless where the cursor is on line",
		"id": 2881,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.867",
		"status": "",
		"systemWhenCreated": "2020-11-15 12:05:28",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "~",
		"category": "vim",
		"extras": "",
		"front": "toggle upper/lower case of character",
		"id": 2882,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.7984",
		"status": "",
		"systemWhenCreated": "2020-11-15 12:09:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `i` and `a`",
		"category": "vim",
		"extras": "",
		"front": "insert before cursor / insert after cursor",
		"id": 2883,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-15 13:52:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "o",
		"category": "vim",
		"extras": "",
		"front": "start typing in line below current line",
		"id": 2884,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.99934",
		"status": "",
		"systemWhenCreated": "2020-11-15 13:52:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "c3w",
		"category": "vim",
		"extras": "",
		"front": "change three words",
		"id": 2885,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-15 13:52:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "c$",
		"category": "vim",
		"extras": "",
		"front": "change text from the cursor to the end of the line",
		"id": 2886,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.9232",
		"status": "",
		"systemWhenCreated": "2020-11-15 13:52:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "c0",
		"category": "vim",
		"extras": "",
		"front": "change text from the cursor to the beginning of the line",
		"id": 2887,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.8232",
		"status": "",
		"systemWhenCreated": "2020-11-15 13:52:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `gi` absolute beginning of line, `I` begging of text in line (after tabs)",
		"category": "vim",
		"extras": "",
		"front": "insert at beginning of line",
		"id": 2888,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.7785",
		"status": "",
		"systemWhenCreated": "2020-11-15 13:52:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "O",
		"category": "vim",
		"extras": "",
		"front": "start typing in line above current line",
		"id": 2889,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.99934",
		"status": "",
		"systemWhenCreated": "2020-11-15 13:52:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ZZ",
		"category": "vim",
		"extras": "",
		"front": "save and exit",
		"id": 2890,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.954",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:30:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` [[CTRL-PageUp]] and [[CTRL-PageDown]]",
		"category": "vscode",
		"extras": "",
		"front": "move to next tab with keyboard",
		"id": 2891,
		"importId": "",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.8323",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:30:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "wq! backupChanges.txt",
		"category": "vim",
		"extras": "",
		"front": "write changes to another file and quit (leaving original file unchanged)",
		"id": 2892,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.75676",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:30:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ZQ",
		"category": "vim",
		"extras": "",
		"front": "forget changes and exit",
		"id": 2893,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.954",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:30:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "d3w",
		"category": "vim",
		"extras": "",
		"front": "delete three words",
		"id": 2894,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.8676",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:54:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": ".",
		"category": "vim",
		"extras": "",
		"front": "repeat last command",
		"id": 2895,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.9992343",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:54:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `C` and `D`",
		"category": "vim",
		"extras": "",
		"front": "change or delete to the end of the line",
		"id": 2896,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.9232",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:54:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "X",
		"category": "vim",
		"extras": "",
		"front": "delete backwards",
		"id": 2897,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.8343",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:54:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "``` `0` or `^`",
		"category": "vim",
		"extras": "",
		"front": "go to first position or character in line",
		"id": 2898,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.8767",
		"status": "",
		"systemWhenCreated": "2020-11-16 01:54:14",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`P` for paste before current character, `p` for paste after current character",
		"category": "vim",
		"extras": "",
		"front": "two ways to paste after delete or yank",
		"id": 2899,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.9232",
		"status": "",
		"systemWhenCreated": "2020-11-16 03:57:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:22` or `22` [[shift-g]]",
		"category": "vim",
		"extras": "",
		"front": "goto line 22",
		"id": 2900,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.945",
		"status": "",
		"systemWhenCreated": "2020-11-16 03:57:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`dd k P`",
		"category": "vim",
		"extras": "",
		"front": "move line up",
		"id": 2901,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.83",
		"status": "",
		"systemWhenCreated": "2020-11-16 03:57:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`xp`",
		"category": "vim",
		"extras": "$keywords=switch",
		"front": "swap two letters",
		"id": 2902,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-16 03:57:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`dd p`",
		"category": "vim",
		"extras": "",
		"front": "move line down",
		"id": 2903,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.83",
		"status": "",
		"systemWhenCreated": "2020-11-16 03:57:07",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`n` and `N`",
		"category": "vim",
		"extras": "",
		"front": "repeat search forward and backward",
		"id": 2904,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.999923",
		"status": "",
		"systemWhenCreated": "2020-11-16 09:54:08",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`d)`",
		"category": "vim",
		"extras": "",
		"front": "delete sentence",
		"id": 2905,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.654565",
		"status": "",
		"systemWhenCreated": "2020-11-16 14:01:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`\"a yy` then `\"a P`",
		"category": "vim",
		"extras": "",
		"front": "yank to register a, then paste from register a ",
		"id": 2906,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.95787373",
		"status": "",
		"systemWhenCreated": "2020-11-16 14:01:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "[[CTRL-V]] `6jllc* `",
		"category": "vim",
		"extras": "",
		"front": "change all hypens to stars at beginning of lines",
		"id": 2907,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.832423",
		"status": "",
		"systemWhenCreated": "2020-11-16 14:01:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`d/, and`",
		"category": "vim",
		"extras": "",
		"front": "delete everything up to \", and\"",
		"id": 2908,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.963636",
		"status": "",
		"systemWhenCreated": "2020-11-16 14:01:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`\"*p`",
		"category": "vim",
		"extras": "",
		"front": "paste from Windows clipboard",
		"id": 2909,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.9787373",
		"status": "",
		"systemWhenCreated": "2020-11-16 14:01:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`c/how`",
		"category": "vim",
		"extras": "",
		"front": "change everything up to the word \"how\"",
		"id": 2910,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.963636",
		"status": "",
		"systemWhenCreated": "2020-11-16 14:01:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": ":%s/old/new/gc",
		"category": "vim",
		"extras": "",
		"front": "search and replace globally and confirm each one",
		"id": 2911,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.9545",
		"status": "",
		"systemWhenCreated": "2020-11-17 10:44:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`ma` and `'a` or `mb` and `'b` ",
		"category": "vim",
		"extras": "$rank=4.973",
		"front": "create and go to bookmark",
		"id": 2912,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.973",
		"status": "",
		"systemWhenCreated": "2020-11-17 11:15:06",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`}` and `{`",
		"category": "vim",
		"extras": "",
		"front": "move one code block at a time",
		"id": 2913,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5\t",
		"status": "",
		"systemWhenCreated": "2020-11-17 11:15:06",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`\\`\\`` (back-tick, back-tick)",
		"category": "vim",
		"extras": "",
		"front": "go back to last position",
		"id": 2914,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-17 11:15:06",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`\\`.` (back-tick .)",
		"category": "vim",
		"extras": "",
		"front": "go back to last edit",
		"id": 2915,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-17 11:15:06",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:new testing.txt` (if it exist, it will open it)",
		"category": "vim",
		"extras": "",
		"front": "create new file in second window",
		"id": 2916,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-17 13:14:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:ls`, find number, then `:b 3`",
		"category": "vim",
		"extras": "",
		"front": "if you have many buffers open, how to list and go to one quickly",
		"id": 2917,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.65",
		"status": "",
		"systemWhenCreated": "2020-11-17 13:14:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:r ` [[TAB]] and select (note there is a space after \"r\")",
		"category": "vim",
		"extras": "",
		"front": "insert a file at the cursor",
		"id": 2918,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-17 13:14:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:e!`",
		"category": "vim",
		"extras": "",
		"front": "discard all changes to a file",
		"id": 2919,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.78",
		"status": "",
		"systemWhenCreated": "2020-11-17 13:14:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:split` then toggle with [[CTRL-W]][[CTRL-W]], and close with [[CTRL-W]][[C]]",
		"category": "vim",
		"extras": "",
		"front": "break screen into two and toggle between them",
		"id": 2920,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-17 13:14:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:e.` then `/` to search",
		"category": "vim",
		"extras": "",
		"front": "how to search for a file and open it",
		"id": 2921,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.55",
		"status": "",
		"systemWhenCreated": "2020-11-17 13:14:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:e pageHome.tsx`, `:bn`/`:bp` buffer next/previous, `:bc` buffer close",
		"category": "vim",
		"extras": "",
		"front": "open a new file in new buffer",
		"id": 2922,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5",
		"status": "",
		"systemWhenCreated": "2020-11-17 13:14:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "[[CTRL-G]] look at bottom line",
		"category": "vim",
		"extras": "",
		"front": "get info on file",
		"id": 2923,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.45",
		"status": "",
		"systemWhenCreated": "2020-11-17 13:14:16",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`!ls -al`",
		"category": "vim",
		"extras": "",
		"front": "run a terminal command from inside vim",
		"id": 2924,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.785",
		"status": "",
		"systemWhenCreated": "2020-11-18 11:21:26",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:abb _imprea import React, { Component } from 'react';` then to execute `_imprea` [[ENTER]], and to not execute [[CTRL-V]]",
		"category": "vim",
		"extras": "",
		"front": "create abbreviation",
		"id": 2925,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.5\t",
		"status": "",
		"systemWhenCreated": "2020-11-18 11:21:26",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:se nu` and `:se nonu`",
		"category": "vim",
		"extras": "",
		"front": "turn line numbers on and off",
		"id": 2926,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.4",
		"status": "",
		"systemWhenCreated": "2020-11-18 11:21:26",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "list (arrays), tuple (fixed arrays), set (unordered, no multiples, add but not change), dictionary (like JSON)",
		"category": "python",
		"extras": "",
		"front": "what are the four collection types",
		"id": 2927,
		"importId": "",
		"kind": "facts",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "4.95",
		"status": "",
		"systemWhenCreated": "2020-11-18 16:21:33",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:sh` and `exit`",
		"category": "vim",
		"extras": "",
		"front": "escape to the shell and back",
		"id": 2928,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-23 16:56:27",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`ls -d a*` or `ls -ald a*`",
		"category": "linux",
		"extras": "",
		"front": "list all files that start with a",
		"id": 2929,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-23 16:56:27",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "[[CTRL-SHIFT-C]]",
		"category": "linux",
		"extras": "",
		"front": "copy selected text in terminal",
		"id": 2930,
		"importId": "",
		"kind": "command-line shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-24 15:40:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "[[CTRL-A]] and [[CTRL-E]]",
		"category": "linux",
		"extras": "",
		"front": "move to beginning and end of line",
		"id": 2931,
		"importId": "",
		"kind": "command-line shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-24 15:40:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "apropos copy",
		"category": "linux",
		"extras": "",
		"front": "how to find the command that has to do with copying",
		"id": 2932,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-24 15:40:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "[[CTRL-T]]",
		"category": "linux",
		"extras": "",
		"front": "transpose characters at cursor",
		"id": 2933,
		"importId": "",
		"kind": "command-line shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-24 15:40:32",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`cat /etc/*release` or `hotnamectl` and `uname -a` (all) and `uptime` and `df -h` (space available, human readable), `free` (memory), ",
		"category": "linux",
		"extras": "",
		"front": "how to find out release and other infos of system",
		"id": 2934,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-26 15:14:42",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": " `gt` and `gT`",
		"category": "vim",
		"extras": "",
		"front": "VSCODE: move to next and previous tab",
		"id": 2935,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-11-27 00:09:43",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`const timeStamp = Math.floor(new Date() / 1000);` e.g. `1607439748`",
		"category": "javascript",
		"extras": "",
		"front": "how to get timestamp in seconds",
		"id": 2936,
		"importId": "",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-12-08 16:05:21",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`\"_dd`",
		"category": "vim",
		"extras": "",
		"front": "delete to a register (so that you save what is in your main register)",
		"id": 2937,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-12-10 21:34:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`yiw` then `viwp`",
		"category": "vim",
		"extras": "",
		"front": "replace word with yank content",
		"id": 2938,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-12-10 21:34:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`J`",
		"category": "vim",
		"extras": "",
		"front": "bring next line up to current line",
		"id": 2940,
		"importId": "",
		"kind": "shortcut",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-12-11 15:25:21",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "put `/* eslint react/sort-comp: 0 */` on first line",
		"category": "react",
		"extras": "",
		"front": "how to disable eslint sort-comp for a specific page",
		"id": 2941,
		"importId": "",
		"kind": "code",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-12-12 21:33:54",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`console.time('main process')` and `console.timeEnd('main process')`",
		"category": "JavaScript",
		"extras": "",
		"front": "how to measure time in console",
		"id": 2942,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-12-15 08:13:58",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "select with [[CTRL-V]], then `:` and add `s/\"/'/g`",
		"category": "vim",
		"extras": "",
		"front": "search and replace in selection",
		"id": 2943,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2020-12-27 14:34:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`npm i -g npm@latest` (Mine went from 6.14.8 to 6.14.11)",
		"category": "npm",
		"extras": "",
		"front": "update npm to latest version",
		"id": 2944,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-20 11:27:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "settings cog wheel on right, Panel Layout: auto or vertical",
		"category": "chrome developer tools",
		"extras": "$idCode=chromePanelLayoutRight",
		"front": "How to get the styles window to appear on the right instead of the bottom",
		"id": 2945,
		"importId": "",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-21 14:19:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`npm i concurrently`\n`\"startapp\": \"node_modules/.bin/nodemon server.js\",`\n`\"start\": \"concurrently \\\"gulp\\\" \\\"npm run startapp\\\"`",
		"category": "node",
		"extras": "",
		"front": "how to run multiple commands in npm scripts",
		"id": 2946,
		"importId": "",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-21 14:19:55",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "```\nconst fsp = require('fs').promises;\n\nfsp.copyFile('copyfile.js', 'copyfile.js.bak')\n\t.then(() => console.log('file is copied'))\n\t.catch(() => console.log('error occured'));\n\nconsole.log('execution continues')\n```",
		"category": "node ",
		"extras": "",
		"front": "copy a file in node with promises",
		"id": 2947,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-23 19:01:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`git ls-files`",
		"category": "git",
		"extras": "",
		"front": "list all files in local repository",
		"id": 2948,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-26 14:13:39",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "you do `git push --force` and everyone else does `git reset --hard origin/main`",
		"category": "git",
		"extras": "",
		"front": "what if someone commits bad code and you need to force your version onto the remote repository",
		"id": 2949,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-26 14:13:39",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "```\ngit commit -m \"Something terribly misguided\"\ngit reset HEAD~\n(edit files as necessary)\ngit add .\ngit commit -c ORIG_HEAD\n```",
		"category": "git",
		"extras": "",
		"front": "how to undo and fix a bad commit, recommitting with same name",
		"id": 2950,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-26 14:13:39",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`cp -R ../gitadv333_files/. .`",
		"category": "linux",
		"extras": "",
		"front": "copy all files and sub-directories from another directory to current directory",
		"id": 2951,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-26 14:13:39",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`git branch -r -d origin/devel`*",
		"category": "git",
		"extras": "",
		"front": "how to delete an origin/master branch that is hanging around locally",
		"id": 2952,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-26 14:13:39",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`find . -type d -name .git -exec rm -rf {} \\;`",
		"category": "linux",
		"extras": "",
		"front": "how to delete all .git directories in all sub-directories",
		"id": 2953,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-26 14:13:39",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "- add to *.vimrc* files (or on Windows: *C:\\Users\\ADMIN\\_vimrc*)\n\t--------------------------\n\tset nobackup\n\tset noswapfile\n\tset noundofile\n\t--------------------------",
		"category": "vim",
		"extras": "",
		"front": "How to get vim stop leaving swap file residue in the directories",
		"id": 2954,
		"importId": "",
		"kind": "setup",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-26 14:13:39",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`find . -regextype posix-extended -regex '.*\\.(png|jpg)$'`",
		"category": "linux",
		"extras": "",
		"front": "list all png and jpg files in directory and all directories below",
		"id": 2955,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-01-26 20:44:48",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-A, CTRL-E, CTRL-F, CTRL-B, CTRL-U",
		"category": "linux",
		"extras": "",
		"front": "navigate on command line",
		"id": 2956,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-03 18:56:17",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`git diff --cached --stat | wc -l`",
		"category": "linux",
		"extras": "",
		"front": "get number of staged files e.g. if you included node_modules",
		"id": 2957,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-03 18:56:17",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "make sure you have commited changed in your branches, go to main, `git branch --no-merged`",
		"category": "git",
		"extras": "",
		"front": "see if there are any unmerged branches",
		"id": 2958,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-03 18:56:17",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`\"ayw` and `\"aP`",
		"category": "vim",
		"extras": "",
		"front": "put word in register then paste",
		"id": 2963,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-06 23:28:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:reg`",
		"category": "vim",
		"extras": "",
		"front": "see what you have copied",
		"id": 2964,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-06 23:28:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`qa` to record macro in register a; `q` to end; `@a` to run macro a; `11@a` to run macro a 11 times",
		"category": "vim",
		"extras": "",
		"front": "macro basics",
		"id": 2965,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-06 23:28:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`s`",
		"category": "vim",
		"extras": "",
		"front": "delete current character and start typing",
		"id": 2966,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-06 23:28:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`align-items: center`;`justify-items: center`;or both: `place-items: center center`",
		"category": "css",
		"extras": "",
		"front": "place content in center of grid boxes",
		"id": 2967,
		"importId": "",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-07 11:08:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`yy, vP`",
		"category": "vim",
		"extras": "",
		"front": "replace line with another",
		"id": 2968,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-08 19:25:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`{todos.length > 0 && toDoItems}`",
		"category": "jsx",
		"extras": "",
		"front": "how to do a conditional in React JSX",
		"id": 2969,
		"importId": "",
		"kind": "syntax",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-10 14:27:10",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ver: veo ves ve vemos veis ven",
		"category": "spanish",
		"extras": "",
		"front": "present tense to see",
		"id": 2970,
		"importId": "",
		"kind": "verbs",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-12 00:05:11",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "const [first, second, third] = [\"James\", \"Axel\", \"Henri\"];\nconsole.log(first, second, third)",
		"category": "es6",
		"extras": "",
		"front": "how to destructure an array into variables",
		"id": 2971,
		"importId": "",
		"kind": "syntax",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-16 00:20:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`<p className={props.highlight === \"true\" ? \"highlight\" : \"normal\"}>test</p>`",
		"category": "react",
		"extras": "",
		"front": "how to create a dynamic class ",
		"id": 2972,
		"importId": "",
		"kind": "syntax",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-16 00:20:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "- `npm i react-icons`\n- `import { FaStar } from 'react-icons/fa';`\n- `<FaStar color={selected ? 'yellow' : '#888'} />`",
		"category": "react",
		"extras": "",
		"front": "install react icons",
		"id": 2973,
		"importId": "",
		"kind": "feature",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-16 00:20:18",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`gd`",
		"category": "vim",
		"extras": "",
		"front": "go to local definition of variable",
		"id": 2974,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-18 22:11:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`%`",
		"category": "vim",
		"extras": "",
		"front": "move to matching character (default supported pairs: '()', '{}', '[]' ",
		"id": 2975,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-18 22:11:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`C`",
		"category": "vim",
		"extras": "",
		"front": "change to the end of the line",
		"id": 2976,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`CTRL-a` and `CTRL-x`",
		"category": "vim",
		"extras": "",
		"front": "increment/decrement number under cursor",
		"id": 2977,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`cc`",
		"category": "vim",
		"extras": "",
		"front": "replace entire line",
		"id": 2978,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:tabfirst` and `:tablast` and `:tabclose`",
		"category": "vim",
		"extras": "",
		"front": "go to first or last tab, and close tab",
		"id": 2979,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`:tabclose`",
		"category": "vim",
		"extras": "",
		"front": "close tab",
		"id": 2980,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "backward: `#`, forward: `*`",
		"category": "vim",
		"extras": "",
		"front": "search back and forth for text under cursor",
		"id": 2981,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`1GVG` (VSCode CTRL-V then works)",
		"category": "vim",
		"extras": "",
		"front": "select whole document",
		"id": 2982,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`R`",
		"category": "vim",
		"extras": "",
		"front": "overwrite characters",
		"id": 2983,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`dG`",
		"category": "vim",
		"extras": "",
		"front": "delete to end of file",
		"id": 2984,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`*`",
		"category": "vim",
		"extras": "",
		"front": "search for word under cursor",
		"id": 2985,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`/20(19|20)`",
		"category": "vim",
		"extras": "",
		"front": "search for 2019 or 2029",
		"id": 2986,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-19 00:15:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "```\n\t&:before {\n\t\tcontent: ' ';\n\t\twhite-space: pre;\n\t}\n```",
		"category": "css",
		"extras": "",
		"front": "how to add space in front of text",
		"id": 2987,
		"importId": "",
		"kind": "commands",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-22 23:05:54",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`touch report{001..015}.txt`",
		"category": "linux",
		"extras": "",
		"front": "create report001.txt, report002.txt, etc. to 015",
		"id": 2989,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-25 07:35:01",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`tree -L 2 /home`",
		"category": "linux",
		"extras": "",
		"front": "list files two levels deep",
		"id": 2990,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-25 07:35:01",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`less /etc/passwd | grep et` and available are here: `cat /etc/shells` (or `grep et: /etc/passwd`)",
		"category": "linux",
		"extras": "",
		"front": "how to find your shell ",
		"id": 2991,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-25 07:35:01",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`lsb_release -a`\t",
		"category": "ubuntu",
		"extras": "",
		"front": "get Ubuntu version",
		"id": 2992,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-02-25 07:40:48",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git branch <branch name> => neuen branch erstellen\ngit push -u origin <branch name> => neuen branch zu github pushen",
		"category": "git",
		"extras": "",
		"front": "push a local branch to the repository",
		"id": 2994,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-03-15 07:23:20",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reset --hard <commit-hash>\ngit push -f origin master",
		"category": "git",
		"extras": "",
		"front": "how to reset the remote repository to a certain commit",
		"id": 2995,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-04-29 11:39:25",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`git config --global pull.rebase true`",
		"category": "git",
		"extras": "",
		"front": "how to convert commits from merge rebase, e.g. for repositories where each member checks in files in their own directories",
		"id": 2996,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-05-02 17:49:34",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git revert 3321844",
		"category": "git",
		"extras": "",
		"front": "how to revert to a specfic hash",
		"id": 2997,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-05-03 19:43:04",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git reset --hard <hash>\ngit push --force ",
		"category": "git",
		"extras": "",
		"front": "how to remove a commit from a remote repository",
		"id": 2998,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2021-05-11 16:39:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "node\nrequire('crypto').randomBytes(64).toString('hex')",
		"category": "linux",
		"extras": "",
		"front": "how to get a random list of characters",
		"id": 2999,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-03-22 06:56:38",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git branch | grep -v \"dev\" | xargs git branch -D ",
		"category": "git",
		"extras": "",
		"front": "delete all local branches except dev",
		"id": 3000,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-07 18:25:31",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`mkdir -p .github/workflows`",
		"category": "linux",
		"extras": "",
		"front": "how to make a deep directory, i.e. create parent directories",
		"id": 3001,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-09 00:40:52",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "- [[CTRL-,]] (settings)\n- search for `Scm Diff Decorations` \n- change **SCM: Diff Decorations Gutter Width**",
		"category": "vscode",
		"extras": "",
		"front": "how to increase the width of the line that shows changes in a file",
		"id": 3002,
		"importId": "",
		"kind": "settings",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-12 23:18:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "[[CTRL-F]] and search#gif#thefindterm",
		"category": "vscode",
		"extras": "",
		"front": "how to search text in the terminal",
		"id": 3003,
		"importId": "",
		"kind": "tip",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-12 23:18:23",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "##test88383",
		"category": "test",
		"extras": "",
		"front": "This is a test front with image",
		"id": 3004,
		"importId": "",
		"kind": "item",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-12 23:35:51",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "an open-source tool that can build static HTML websites using popular frontend JavaScript frameworks (React, Vue, Svelte), while loading fully interactive components as needed @@dsTXcSeAZq8\t\t\t\t",
		"category": "newTech",
		"extras": "",
		"front": "What is Astro",
		"id": 3005,
		"importId": "",
		"kind": "jamstack",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-12 23:55:49",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "- one\n\t- 111\n\t- 111111\n- two\n\t- 222\n\t- 222222",
		"category": "test",
		"extras": "",
		"front": "This is a test of an outline",
		"id": 3006,
		"importId": "",
		"kind": "test2",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-13 01:10:03",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "This is an example of the line above the image on a one-liner:##test88383",
		"category": "test",
		"extras": "",
		"front": "This is a test front with one line and image",
		"id": 3007,
		"importId": "",
		"kind": "item",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-15 11:07:37",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "`git log dev..origin/dev`",
		"category": "linux",
		"extras": "",
		"front": "how to see what commits you are about to pull from GitHub",
		"id": 3008,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-04-29 11:50:41",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "CTRL-ALT left and right",
		"category": "ubuntu",
		"extras": "",
		"front": "how to switch between desktop workspace",
		"id": 3009,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-06-18 22:42:08",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ctrl-alt-t",
		"category": "linux",
		"extras": "",
		"front": "bring up terminal",
		"id": 3010,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-06-25 16:48:45",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "sudo apt --fix-broken install\nsudo apt-get -f install",
		"category": "linux",
		"extras": "",
		"front": "how to fix a broken install on Ubuntu",
		"id": 3011,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-07-07 16:27:30",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "socket = io(import.meta.env.VITE_SOCKET_ENDPOINT);",
		"category": "vite",
		"extras": "",
		"front": "if process.env doesn't work on a Vite React site, what should you use to access environment variables",
		"id": 3012,
		"importId": "",
		"kind": "syntax",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-07-07 21:10:09",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "git rm -r --cached node_modules",
		"category": "git",
		"extras": "",
		"front": "if having problem with node_modules",
		"id": 3013,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-07-13 04:38:05",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "sudo add-apt-repository -y ppa:git-core/ppa\nsudo apt-get update\nsudo apt-get install git -y",
		"category": "git",
		"extras": "",
		"front": "How to upgrade Git on Ubuntu",
		"id": 3014,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-08-16 14:38:39",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "ls -ltr",
		"category": "linux",
		"extras": "",
		"front": "sort the file names in the last modification time in reverse order.",
		"id": 3015,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-09-07 01:54:19",
		"systemWhoCreated": "systemUnknown"
	},
	{
		"back": "- `chsh -s /bin/bash`\n- then log out and back in",
		"category": "linux",
		"extras": "",
		"front": "how to change shell to bash",
		"id": 3016,
		"importId": "",
		"kind": "command",
		"labels": "",
		"lastLearned": "",
		"lastTested": "",
		"memoryHook": "",
		"memoryStory": "",
		"numberOfTimesLearned": "",
		"numberOfTimesTested": "",
		"pronunciation": "",
		"rank": "",
		"status": "",
		"systemWhenCreated": "2022-09-08 22:54:26",
		"systemWhoCreated": "systemUnknown"
	}
]
